@startuml Test Infrastructure

skinparam {
  componentStyle rectangle
  defaultFontSize 14
  defaultFontName Arial
  shadowing false
  componentBackgroundColor #f5f5f5
  componentBorderColor #999999
  interfaceBackgroundColor #e0f7fa
  interfaceBorderColor #0097a7
  arrowColor #555555
  packageBackgroundColor #fafafa
  packageBorderColor #bbbbbb
  classBackgroundColor #e8f5e9
  classBorderColor #2e7d32
}

title OneiroMetrics Test Infrastructure

package "Test Framework" {
  class TestRunner {
    + runAllTests()
    + runTestCategory(category: string)
    + runTestCase(testCase: TestCase)
    + generateReport()
  }
  
  class TestRegistry {
    + registerTest(test: TestCase)
    + getTest(id: string)
    + getTestsByCategory(category: string)
  }
  
  abstract class TestCase {
    + id: string
    + name: string
    + category: string
    + description: string
    + run(): TestResult
    + setup()
    + teardown()
  }
  
  class TestResult {
    + passed: boolean
    + message: string
    + duration: number
    + error?: Error
  }
  
  class TestFixture {
    + createTestEnvironment()
    + createMockData()
    + createMockServices()
    + resetEnvironment()
  }
  
  class TestReporter {
    + formatResults(results: TestResult[])
    + displayResults()
    + exportResults()
  }
  
  TestRunner -> TestRegistry : uses
  TestRunner -> TestCase : executes
  TestCase ..> TestResult : produces
  TestCase -> TestFixture : uses
  TestRunner -> TestReporter : uses
}

package "Test Categories" {
  class ParserTests {
    + testDateExtraction()
    + testTagRecognition()
    + testFieldParsing()
  }
  
  class JournalServiceTests {
    + testFileLoading()
    + testTemplateReplacement()
    + testDataProcessing()
  }
  
  class MetricsServiceTests {
    + testCalculations()
    + testFiltering()
    + testAggregation()
  }
  
  class StateManagerTests {
    + testStateUpdates()
    + testEventEmission()
    + testSubscriptions()
  }
  
  class UIComponentTests {
    + testRendering()
    + testEventHandling()
    + testUserInteraction()
  }
  
  class IntegrationTests {
    + testEndToEndFlow()
    + testDataPersistence()
    + testErrorHandling()
  }
  
  class TypeSystemTests {
    + testTypeGuards()
    + testAdapterFunctions()
    + testInterfaceCompatibility()
    + testPropertyAccessHelpers()
  }
  
  ParserTests --|> TestCase
  JournalServiceTests --|> TestCase
  MetricsServiceTests --|> TestCase
  StateManagerTests --|> TestCase
  UIComponentTests --|> TestCase
  IntegrationTests --|> TestCase
  TypeSystemTests --|> TestCase
}

package "Synchronous Testing" {
  class SyncTestExecutor {
    + runSync(test: TestCase)
    + setupTestContext()
    + assertResults()
  }
  
  class TypeGuardTester {
    + testGuardFunction(guard: Function, cases: any[])
    + validateTypeAssertions()
  }
  
  class PropertyTester {
    + testPropertyAccess(helper: Function, objects: any[])
    + validatePropertyResults()
  }
  
  SyncTestExecutor -> TestCase : executes synchronously
  TypeGuardTester -> TypeSystemTests : provides utilities for
  PropertyTester -> TypeSystemTests : provides utilities for
}

package "Asynchronous Testing" {
  class AsyncTestExecutor {
    + runAsync(test: TestCase): Promise<TestResult>
    + queueTest(test: TestCase)
    + awaitCompletion(): Promise<TestResult[]>
  }
  
  class EventEmitterTester {
    + subscribeToEvent(emitter: EventEmitter, event: string)
    + awaitEvent(timeout: number): Promise<any>
    + validateEventSequence(events: string[]): Promise<boolean>
  }
  
  class ServiceTester {
    + mockAsyncOperation(service: any, method: string)
    + simulateDelay(ms: number)
    + chainedOperations(operations: Function[]): Promise<any>
  }
  
  AsyncTestExecutor -> TestCase : executes asynchronously
  EventEmitterTester -> StateManagerTests : provides utilities for
  ServiceTester -> JournalServiceTests : provides utilities for
  ServiceTester -> MetricsServiceTests : provides utilities for
}

package "Test UI" {
  class TestRunnerModal {
    + render()
    + onRunTest()
    + onSelectCategory()
    + displayResults()
  }
  
  class TestResultView {
    + renderResult(result: TestResult)
    + renderSummary(results: TestResult[])
  }
  
  class TestCategorySelector {
    + renderCategories()
    + onSelect()
  }
  
  class TestProgressIndicator {
    + showProgress(completed: number, total: number)
    + updateStatus(status: string)
    + indicateAsyncTests(running: number)
  }
  
  TestRunnerModal --> TestRunner : uses
  TestRunnerModal --> TestResultView : contains
  TestRunnerModal --> TestCategorySelector : contains
  TestRunnerModal --> TestProgressIndicator : contains
}

package "Mock Utilities" {
  class MockFileSystem {
    + createTempFile()
    + mockFileRead()
    + mockFileWrite()
  }
  
  class MockObsidianAPI {
    + mockVault()
    + mockMetadata()
    + mockEvents()
  }
  
  class MockServiceContainer {
    + createMockServices()
    + resetServices()
  }
  
  class TypeValidationMock {
    + mockTypeGuard(guardName: string, returnValue: boolean)
    + mockAdapterFunction(adapterName: string, returnValue: any)
    + simulateTypeError(errorType: string)
  }
  
  TestFixture --> MockFileSystem : uses
  TestFixture --> MockObsidianAPI : uses
  TestFixture --> MockServiceContainer : uses
  TestFixture --> TypeValidationMock : uses
  TypeSystemTests --> TypeValidationMock : uses for mocking
}

class TestingModule {
  + initialize()
  + registerTests()
  + showTestModal()
}

TestingModule --> TestRunner : initializes
TestingModule --> TestRegistry : registers tests
TestingModule --> TestRunnerModal : shows

note bottom of TypeSystemTests
  TypeSystemTests verify the TypeScript 
  infrastructure including type guards,
  adapter functions, interface compatibility,
  and safe property access.
end note

note bottom of AsyncTestExecutor
  AsyncTestExecutor handles tests that
  involve Promises, async/await, and
  event-based operations, particularly
  important for testing UI updates and
  file operations.
end note

note bottom of SyncTestExecutor
  SyncTestExecutor handles synchronous tests
  like type validations, data transformations,
  and pure function behaviors.
end note

note right of TypeValidationMock
  TypeValidationMock provides utilities
  for testing TypeScript-specific features
  by simulating type guards, adapters, and
  generating controlled type errors.
end note

@enduml 