@startuml Test Infrastructure

skinparam {
  componentStyle rectangle
  defaultFontSize 14
  defaultFontName Arial
  shadowing false
  componentBackgroundColor #f5f5f5
  componentBorderColor #999999
  interfaceBackgroundColor #e0f7fa
  interfaceBorderColor #0097a7
  arrowColor #555555
  packageBackgroundColor #fafafa
  packageBorderColor #bbbbbb
  classBackgroundColor #e8f5e9
  classBorderColor #2e7d32
}

title OneiroMetrics Test Infrastructure

package "Test Framework" {
  class TestRunner {
    + runAllTests()
    + runTestCategory(category: string)
    + runTestCase(testCase: TestCase)
    + generateReport()
  }
  
  class TestRegistry {
    + registerTest(test: TestCase)
    + getTest(id: string)
    + getTestsByCategory(category: string)
  }
  
  abstract class TestCase {
    + id: string
    + name: string
    + category: string
    + description: string
    + run(): TestResult
    + setup()
    + teardown()
  }
  
  class TestResult {
    + passed: boolean
    + message: string
    + duration: number
    + error?: Error
  }
  
  class TestFixture {
    + createTestEnvironment()
    + createMockData()
    + createMockServices()
    + resetEnvironment()
  }
  
  class TestReporter {
    + formatResults(results: TestResult[])
    + displayResults()
    + exportResults()
  }
  
  TestRunner -> TestRegistry : uses
  TestRunner -> TestCase : executes
  TestCase ..> TestResult : produces
  TestCase -> TestFixture : uses
  TestRunner -> TestReporter : uses
}

package "Test Categories" {
  class ParserTests {
    + testDateExtraction()
    + testTagRecognition()
    + testFieldParsing()
  }
  
  class JournalServiceTests {
    + testFileLoading()
    + testTemplateReplacement()
    + testDataProcessing()
  }
  
  class MetricsServiceTests {
    + testCalculations()
    + testFiltering()
    + testAggregation()
  }
  
  class StateManagerTests {
    + testStateUpdates()
    + testEventEmission()
    + testSubscriptions()
  }
  
  class UIComponentTests {
    + testRendering()
    + testEventHandling()
    + testUserInteraction()
  }
  
  class IntegrationTests {
    + testEndToEndFlow()
    + testDataPersistence()
    + testErrorHandling()
  }
  
  ParserTests --|> TestCase
  JournalServiceTests --|> TestCase
  MetricsServiceTests --|> TestCase
  StateManagerTests --|> TestCase
  UIComponentTests --|> TestCase
  IntegrationTests --|> TestCase
}

package "Test UI" {
  class TestRunnerModal {
    + render()
    + onRunTest()
    + onSelectCategory()
    + displayResults()
  }
  
  class TestResultView {
    + renderResult(result: TestResult)
    + renderSummary(results: TestResult[])
  }
  
  class TestCategorySelector {
    + renderCategories()
    + onSelect()
  }
  
  TestRunnerModal --> TestRunner : uses
  TestRunnerModal --> TestResultView : contains
  TestRunnerModal --> TestCategorySelector : contains
}

package "Mock Utilities" {
  class MockFileSystem {
    + createTempFile()
    + mockFileRead()
    + mockFileWrite()
  }
  
  class MockObsidianAPI {
    + mockVault()
    + mockMetadata()
    + mockEvents()
  }
  
  class MockServiceContainer {
    + createMockServices()
    + resetServices()
  }
  
  TestFixture --> MockFileSystem : uses
  TestFixture --> MockObsidianAPI : uses
  TestFixture --> MockServiceContainer : uses
}

class TestingModule {
  + initialize()
  + registerTests()
  + showTestModal()
}

TestingModule --> TestRunner : initializes
TestingModule --> TestRegistry : registers tests
TestingModule --> TestRunnerModal : shows

note bottom of TestCase
  Test cases implement the actual
  test logic for each component
  or functionality.
end note

note right of MockUtilities
  Mock utilities provide isolated
  environments for testing without
  affecting real data or requiring
  the full Obsidian environment.
end note

@enduml 