@startuml Component Architecture

skinparam {
  componentStyle rectangle
  defaultFontSize 14
  defaultFontName Arial
  shadowing false
  componentBackgroundColor #f5f5f5
  componentBorderColor #999999
  interfaceBackgroundColor #e0f7fa
  interfaceBorderColor #0097a7
  arrowColor #555555
  packageBackgroundColor #fafafa
  packageBorderColor #bbbbbb
}

title OneiroMetrics Component Architecture

' Main Plugin Component
component [OneiroMetricsPlugin] as MainPlugin

package "State Management" {
  component [StateManager] as StateManager
  component [MetricsStore] as MetricsStore
  component [ConfigStore] as ConfigStore
  component [JournalStore] as JournalStore
  
  JournalStore -up-> StateManager : updates
  MetricsStore -up-> StateManager : updates
  ConfigStore -up-> StateManager : updates
}

package "Services" {
  component [FileService] as FileService
  component [JournalService] as JournalService
  component [MetricsService] as MetricsService
  component [TemplateService] as TemplateService
  component [LoggingService] as LoggingService
  
  JournalService --> FileService : uses
  JournalService --> TemplateService : uses
  MetricsService --> JournalService : uses
}

package "UI Components" {
  component [RibbonButton] as RibbonButton
  component [SettingsTab] as SettingsTab
  component [DashboardView] as DashboardView
  
  component [JournalEntryView] as JournalEntryView
  component [MetricsPanel] as MetricsPanel
  component [FilterPanel] as FilterPanel
  component [ExportModal] as ExportModal
  component [TestRunnerModal] as TestRunnerModal

  DashboardView --> JournalEntryView : contains
  DashboardView --> MetricsPanel : contains
  DashboardView --> FilterPanel : contains
}

package "Testing" {
  component [TestRunner] as TestRunner
  component [TestCase] as TestCase
  component [TestFixture] as TestFixture
  
  TestRunner --> TestCase : executes
  TestCase --> TestFixture : uses
  
  TestRunnerModal --> TestRunner : displays
}

package "Core" {
  component [Parser] as Parser
  component [Filters] as Filters
  component [Analytics] as Analytics
  component [Utils] as Utils
  
  JournalService --> Parser : uses
  MetricsService --> Analytics : uses
  MetricsService --> Filters : uses
}

package "TypeScript Utilities" {
  component [TypeAdapters] as TypeAdapters
  component [PropertyHelpers] as PropertyHelpers
  component [TypeGuards] as TypeGuards
  component [EventSystem] as EventSystem
  
  TypeAdapters --> PropertyHelpers : uses
  TypeAdapters --> TypeGuards : uses
  EventSystem --> TypeGuards : uses
  
  note right of TypeAdapters
    Converts between different
    interface versions
  end note
  
  note right of PropertyHelpers
    Safe property access with
    backward compatibility
  end note
}

' Interface definitions - using correct PlantUML interface notation
interface "ServiceInterface" as SRInterface
interface "ComponentInterface" as SMCInterface
interface "AdapterInterface" as TSAInterface

' Main relationships
MainPlugin --> StateManager : initializes
MainPlugin --> RibbonButton : registers
MainPlugin --> SettingsTab : registers
MainPlugin --> DashboardView : registers

MainPlugin -down- SRInterface
StateManager --> JournalService : provides state
StateManager --> MetricsService : provides state
StateManager --> TemplateService : provides state
StateManager --> LoggingService : provides state
StateManager --> FileService : provides state

JournalService --> JournalStore : updates
MetricsService --> MetricsStore : updates
TemplateService --> ConfigStore : reads

' UI data flow
DashboardView --> StateManager : subscribes
SettingsTab --> ConfigStore : updates
RibbonButton --> DashboardView : opens

' TypeScript Utilities relationships
StateManager --> TypeAdapters : uses
StateManager --> EventSystem : uses
JournalService --> PropertyHelpers : uses
MetricsService --> PropertyHelpers : uses
SettingsTab --> TypeAdapters : uses
Utils --> TypeGuards : contains
Utils --> PropertyHelpers : contains

' Component to Interface relationships
DashboardView -up- SMCInterface
MetricsPanel -up- SMCInterface
FilterPanel -up- SMCInterface
JournalEntryView -up- SMCInterface

TypeAdapters -down- TSAInterface

note right of SRInterface
  Service Interface:
  - initialize()
  - getState()
  - registerEvents()
end note

note right of SMCInterface
  Component Interface:
  - onStateChange()
  - render()
end note

note right of TSAInterface
  Adapter Interface:
  - adaptToInterface()
  - getProperty()
  - validateType()
end note

@enduml 