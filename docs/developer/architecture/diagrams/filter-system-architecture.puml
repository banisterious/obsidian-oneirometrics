@startuml Filter System Architecture

skinparam {
  componentStyle rectangle
  defaultFontSize 14
  defaultFontName Arial
  shadowing false
  componentBackgroundColor #f5f5f5
  componentBorderColor #999999
  interfaceBackgroundColor #e0f7fa
  interfaceBorderColor #0097a7
  arrowColor #555555
  packageBackgroundColor #fafafa
  packageBorderColor #bbbbbb
}

title OneiroMetrics Filter System Architecture

package "Filter System Core" {
  component [FilterManager] as FilterManager
  component [FilterRegistry] as FilterRegistry
  component [FilterState] as FilterState
  
  FilterManager --> FilterRegistry : manages
  FilterManager --> FilterState : maintains
}

package "Filter Types" {
  component [DateFilter] as DateFilter
  component [MetricFilter] as MetricFilter
  component [TagFilter] as TagFilter
  component [TextFilter] as TextFilter
  component [CompositeFilter] as CompositeFilter
  
  FilterRegistry --> DateFilter : registers
  FilterRegistry --> MetricFilter : registers
  FilterRegistry --> TagFilter : registers
  FilterRegistry --> TextFilter : registers
  FilterRegistry --> CompositeFilter : registers
}

package "Date Filter Components" {
  component [DateRangeSelector] as DateRangeSelector
  component [CalendarPicker] as CalendarPicker
  component [PresetDateRanges] as PresetDateRanges
  component [CustomDateRange] as CustomDateRange
  
  DateFilter --> DateRangeSelector : uses
  DateRangeSelector --> CalendarPicker : contains
  DateRangeSelector --> PresetDateRanges : contains
  DateRangeSelector --> CustomDateRange : contains
}

package "Metric Filter Components" {
  component [MetricRangeSelector] as MetricRangeSelector
  component [MetricTypeSelector] as MetricTypeSelector
  component [MetricValueInput] as MetricValueInput
  
  MetricFilter --> MetricRangeSelector : uses
  MetricFilter --> MetricTypeSelector : uses
  MetricFilter --> MetricValueInput : uses
}

package "Filter UI" {
  component [FilterPanel] as FilterPanel
  component [FilterControls] as FilterControls
  component [ActiveFiltersDisplay] as ActiveFiltersDisplay
  component [FilterModal] as FilterModal
  
  FilterPanel --> FilterControls : contains
  FilterPanel --> ActiveFiltersDisplay : contains
  FilterPanel --> FilterModal : shows
  
  FilterControls --> FilterManager : interacts with
  ActiveFiltersDisplay --> FilterState : observes
}

package "Data Processing" {
  component [FilterApplicator] as FilterApplicator
  component [DataTransformer] as DataTransformer
  component [FilteringAlgorithms] as FilteringAlgorithms
  
  FilterApplicator --> FilteringAlgorithms : uses
  FilterApplicator --> DataTransformer : uses
  FilterManager --> FilterApplicator : uses
}

package "Filter Persistence" {
  component [FilterSerializer] as FilterSerializer
  component [FilterPresets] as FilterPresets
  component [HistoryManager] as HistoryManager
  
  FilterManager --> FilterSerializer : uses
  FilterSerializer --> FilterPresets : manages
  FilterSerializer --> HistoryManager : interacts with
}

' External Interface
interface "IFilterable" as IFilterable {
  + applyFilter(filter: Filter): boolean
  + getFilterableProperties(): Record<string, any>
}

interface "IFilter" as IFilter {
  + filter(data: IFilterable[]): IFilterable[]
  + matches(item: IFilterable): boolean
  + serialize(): FilterDefinition
  + deserialize(def: FilterDefinition): IFilter
}

DateFilter --|> IFilter
MetricFilter --|> IFilter
TagFilter --|> IFilter
TextFilter --|> IFilter
CompositeFilter --|> IFilter

FilterApplicator --> IFilterable : filters

' Main data flows
FilterPanel --> FilterManager : user input
FilterManager --> FilterState : updates
FilterState --> ActiveFiltersDisplay : triggers update
FilterManager --> FilterApplicator : applies filters
FilterApplicator --> "Data Display" : filtered data

note right of FilterManager
  The FilterManager serves as the 
  central coordinator for the entire 
  filtering system, handling user input,
  filter state management, and data filtering
end note

note right of CompositeFilter
  CompositeFilter allows combining multiple
  filters with logical operators (AND, OR, NOT)
  to create complex filtering conditions
end note

note bottom of FilterPresets
  Filter presets allow users to save
  and reuse commonly used filter
  combinations
end note

note bottom of IFilterable
  Any data structure that implements
  IFilterable can be filtered by the
  filter system
end note

@enduml 