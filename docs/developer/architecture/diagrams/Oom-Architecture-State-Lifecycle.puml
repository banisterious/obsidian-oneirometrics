@startuml State Lifecycle

skinparam {
  stateBorderColor #777777
  stateBackgroundColor #f5f5f5
  stateStartColor #4caf50
  stateEndColor #f44336
  arrowColor #555555
  backgroundColor #FFFFFF
  defaultFontSize 14
  defaultFontName Arial
}

title OneiroMetrics State Lifecycle

state "Initialize Plugin" as Init
state "Load Configuration" as LoadConfig
state "Initialize Services" as InitServices
state "Load Journal Data" as LoadData
state "Process Journal Data" as ProcessData
state "Calculate Metrics" as CalcMetrics
state "Render UI" as RenderUI
state "Handle User Input" as UserInput
state "Update State" as UpdateState
state "Persist Changes" as Persist
state "Type Validation" as TypeValidation
state "Type Adaptation" as TypeAdaptation

[*] --> Init
Init --> LoadConfig : Plugin loaded
LoadConfig --> TypeAdaptation : Config loaded
TypeAdaptation --> InitServices : Type-safe config
InitServices --> LoadData : Services ready
LoadData --> TypeValidation : Journal files loaded
TypeValidation --> ProcessData : Validated data
ProcessData --> CalcMetrics : Journal data processed
CalcMetrics --> RenderUI : Metrics calculated
RenderUI --> UserInput : UI displayed

state UserInputHandling {
  state "Modify Journal Data" as ModifyJournal
  state "Update Metrics" as UpdateMetrics
  state "Change Settings" as ChangeSettings
  state "Export Data" as ExportData
  
  UserInput --> ModifyJournal : Edit journal entry
  UserInput --> UpdateMetrics : Change metrics filter
  UserInput --> ChangeSettings : Modify settings
  UserInput --> ExportData : Export request
}

ModifyJournal --> TypeValidation : Journal modification
TypeValidation --> UpdateState : Validated changes
UpdateMetrics --> UpdateState : Metrics filter changed
ChangeSettings --> TypeAdaptation : Settings updated
TypeAdaptation --> UpdateState : Normalized settings
ExportData --> UpdateState : Export completed

UpdateState --> ProcessData : Journal data changed
UpdateState --> CalcMetrics : Metrics setting changed
UpdateState --> LoadConfig : Settings changed
UpdateState --> Persist : State updated

Persist --> RenderUI : Changes persisted

state ErrorHandling {
  state "Logger" as Logger
  state "Error UI" as ErrorUI
  state "Recovery" as Recovery
  state "Type Error Handler" as TypeErrorHandler
  
  Init -down-> Logger : Initialization error
  LoadConfig -down-> Logger : Config error
  LoadData -down-> Logger : File read error
  ProcessData -down-> Logger : Parse error
  TypeValidation -down-> TypeErrorHandler : Type validation error
  TypeAdaptation -down-> TypeErrorHandler : Adaptation error
  
  TypeErrorHandler --> Logger : Log type error
  Logger --> ErrorUI : Display error
  ErrorUI --> Recovery : User action
  Recovery --> LoadConfig : Retry
}

note right of UpdateState
  State Manager handles updates to:
  - Journal Store
  - Metrics Store 
  - Config Store
  
  Each update triggers:
  1. Store update
  2. Event emission
  3. Subscriber notification
end note

note right of ProcessData
  Journal Processing includes:
  - Template resolution
  - Tag extraction
  - Date normalization
  - Content parsing
end note

note right of TypeValidation
  Type Validation ensures:
  - Interface compliance
  - Runtime type checking
  - Property existence verification
  - Error prevention
end note

note right of TypeAdaptation
  Type Adaptation handles:
  - Converting between interface versions
  - Normalizing property names
  - Setting default values
  - Providing backward compatibility
end note

@enduml 