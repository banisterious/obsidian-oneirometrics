/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => DreamMetricsPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian2 = require("obsidian");

// types.ts
var DEFAULT_METRICS = [
  {
    name: "Sensory Detail",
    range: { min: 1, max: 5 },
    description: "Level of sensory information recalled from the dream"
  },
  {
    name: "Emotional Recall",
    range: { min: 1, max: 5 },
    description: "Level of emotional detail recalled from the dream"
  },
  {
    name: "Lost Segments",
    range: { min: 0, max: 10 },
    description: "Number of distinct instances where parts of the dream are missing or forgotten"
  },
  {
    name: "Descriptiveness",
    range: { min: 1, max: 5 },
    description: "Level of detail in the dream description"
  },
  {
    name: "Confidence Score",
    range: { min: 1, max: 5 },
    description: "Confidence level in the completeness of dream recall"
  }
];

// settings.ts
var import_obsidian = require("obsidian");
function validateMetricName(name, existingMetrics) {
  if (!name.trim())
    return "Name cannot be empty";
  if (name.length > 50)
    return "Name must be 50 characters or less";
  if (!/^[a-zA-Z0-9\s-]+$/.test(name))
    return "Name can only contain letters, numbers, spaces, and hyphens";
  if (existingMetrics.some((m) => m.name.toLowerCase() === name.toLowerCase())) {
    return "A metric with this name already exists";
  }
  return null;
}
function validateMetricRange(min, max) {
  if (min < 0 || max < 0)
    return "Range values cannot be negative";
  if (min > max)
    return "Minimum value must be less than maximum value";
  if (max > 100)
    return "Maximum value cannot exceed 100";
  if (!Number.isInteger(min) || !Number.isInteger(max))
    return "Range values must be integers";
  return null;
}
function validateMetricDescription(description) {
  if (!description.trim())
    return "Description cannot be empty";
  if (description.length > 200)
    return "Description must be 200 characters or less";
  return null;
}
var MetricEditorModal = class extends import_obsidian.Modal {
  constructor(app, metric, existingMetrics, onSubmit, isEditing = false) {
    super(app);
    this.metric = { ...metric };
    this.existingMetrics = existingMetrics;
    this.onSubmit = onSubmit;
    this.isEditing = isEditing;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.addClass("oom-metric-editor-modal");
    contentEl.createEl("h2", { text: this.isEditing ? "Edit Metric" : "Add New Metric" });
    const nameSetting = new import_obsidian.Setting(contentEl).setName("Name").setDesc("The name of the metric (letters, numbers, spaces, and hyphens only)").addText((text) => {
      text.setValue(this.metric.name).onChange((value) => {
        const error = validateMetricName(value, this.existingMetrics);
        nameSetting.setDesc(error || "The name of the metric (letters, numbers, spaces, and hyphens only)");
        nameSetting.controlEl.classList.toggle("is-invalid", !!error);
        this.metric.name = value;
        this.updatePreview();
      });
    });
    const rangeSetting = new import_obsidian.Setting(contentEl).setName("Range").setDesc("The valid range for this metric").addText((text) => {
      text.setValue(this.metric.range.min.toString()).setPlaceholder("Min").onChange((value) => {
        const min = parseInt(value);
        const error = validateMetricRange(min, this.metric.range.max);
        rangeSetting.setDesc(error || "The valid range for this metric");
        rangeSetting.controlEl.classList.toggle("is-invalid", !!error);
        if (!isNaN(min))
          this.metric.range.min = min;
        this.updatePreview();
      });
    }).addText((text) => {
      text.setValue(this.metric.range.max.toString()).setPlaceholder("Max").onChange((value) => {
        const max = parseInt(value);
        const error = validateMetricRange(this.metric.range.min, max);
        rangeSetting.setDesc(error || "The valid range for this metric");
        rangeSetting.controlEl.classList.toggle("is-invalid", !!error);
        if (!isNaN(max))
          this.metric.range.max = max;
        this.updatePreview();
      });
    });
    const descSetting = new import_obsidian.Setting(contentEl).setName("Description").setDesc("A description of what this metric measures").addTextArea((text) => {
      text.setValue(this.metric.description).onChange((value) => {
        const error = validateMetricDescription(value);
        descSetting.setDesc(error || "A description of what this metric measures");
        descSetting.controlEl.classList.toggle("is-invalid", !!error);
        this.metric.description = value;
      });
    });
    const previewSetting = new import_obsidian.Setting(contentEl).setName("Preview").setDesc("How this metric will appear in your dream journal:");
    const previewEl = contentEl.createEl("div", { cls: "oom-metric-preview" });
    this.updatePreview(previewEl);
    const shortcutsEl = contentEl.createEl("div", { cls: "oom-keyboard-shortcuts" });
    shortcutsEl.createEl("div", { text: "Keyboard Shortcuts:" });
    shortcutsEl.createEl("div", { text: "\u2022 Enter: Save changes" });
    shortcutsEl.createEl("div", { text: "\u2022 Esc: Cancel" });
    shortcutsEl.createEl("div", { text: "\u2022 Tab: Next field" });
    shortcutsEl.createEl("div", { text: "\u2022 Shift+Tab: Previous field" });
    const buttonContainer = contentEl.createEl("div", { cls: "oom-metric-editor-buttons" });
    new import_obsidian.ButtonComponent(buttonContainer).setButtonText("Cancel").onClick(() => this.close());
    new import_obsidian.ButtonComponent(buttonContainer).setButtonText(this.isEditing ? "Save Changes" : "Add Metric").setCta().onClick(() => {
      if (this.validateAll()) {
        this.onSubmit(this.metric);
        this.close();
      }
    });
    const nameInput = nameSetting.controlEl.querySelector("input");
    if (nameInput)
      nameInput.focus();
  }
  updatePreview(previewEl) {
    if (!previewEl) {
      const el = this.contentEl.querySelector(".oom-metric-preview");
      if (!el)
        return;
      previewEl = el;
    }
    previewEl.empty();
    previewEl.createEl("div", { text: `> [!dream-metrics]` });
    const sampleValue = Math.floor((this.metric.range.min + this.metric.range.max) / 2);
    previewEl.createEl("div", { text: `> ${this.metric.name}: ${sampleValue}` });
    previewEl.createEl("div", {
      cls: "oom-preview-range",
      text: `Valid range: ${this.metric.range.min} to ${this.metric.range.max}`
    });
  }
  validateAll() {
    const nameError = validateMetricName(this.metric.name, this.existingMetrics);
    const rangeError = validateMetricRange(this.metric.range.min, this.metric.range.max);
    const descError = validateMetricDescription(this.metric.description);
    if (nameError || rangeError || descError) {
      new import_obsidian.Notice("Please fix all validation errors before saving");
      return false;
    }
    return true;
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var DreamMetricsSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Dream Metrics Settings" });
    new import_obsidian.Setting(containerEl).setName("Project Note Path").setDesc("Path to the note where dream metrics will be aggregated").addSearch((text) => {
      text.setPlaceholder("Dreams/Metrics.md").setValue(this.plugin.settings.projectNotePath).onChange(async (value) => {
        this.plugin.settings.projectNotePath = value;
        await this.plugin.saveSettings();
      });
      const inputEl = text.inputEl;
      inputEl.addClass("oom-file-suggestion");
      const suggestionContainer = containerEl.createEl("div", {
        cls: "suggestion-container",
        attr: { style: "display: none; position: absolute; z-index: 100; background: var(--background-primary); border: 1px solid var(--background-modifier-border); border-radius: 4px; max-height: 200px; overflow-y: auto; width: 100%;" }
      });
      inputEl.addEventListener("input", async (e) => {
        const value = e.target.value;
        if (!value) {
          suggestionContainer.style.display = "none";
          return;
        }
        const files = this.app.vault.getMarkdownFiles();
        const suggestions = files.map((file) => file.path).filter((path) => path.toLowerCase().includes(value.toLowerCase())).slice(0, 5);
        if (suggestions.length > 0) {
          suggestionContainer.empty();
          suggestions.forEach((suggestion) => {
            const item = suggestionContainer.createEl("div", {
              cls: "suggestion-item",
              attr: {
                style: "padding: 8px 12px; cursor: pointer; border-bottom: 1px solid var(--background-modifier-border);"
              },
              text: suggestion
            });
            const regex = new RegExp(`(${value})`, "gi");
            item.innerHTML = suggestion.replace(regex, "<strong>$1</strong>");
            item.addEventListener("mouseover", () => {
              item.style.backgroundColor = "var(--background-modifier-hover)";
            });
            item.addEventListener("mouseout", () => {
              item.style.backgroundColor = "";
            });
            item.addEventListener("click", () => {
              inputEl.value = suggestion;
              this.plugin.settings.projectNotePath = suggestion;
              this.plugin.saveSettings();
              suggestionContainer.style.display = "none";
            });
          });
          suggestionContainer.style.display = "block";
          const inputRect = inputEl.getBoundingClientRect();
          suggestionContainer.style.top = `${inputRect.bottom}px`;
          suggestionContainer.style.left = `${inputRect.left}px`;
          suggestionContainer.style.width = `${inputRect.width}px`;
        } else {
          suggestionContainer.style.display = "none";
        }
      });
      inputEl.addEventListener("keydown", (e) => {
        var _a, _b;
        const items = suggestionContainer.querySelectorAll(".suggestion-item");
        const currentIndex = Array.from(items).findIndex((item) => item.classList.contains("is-selected"));
        switch (e.key) {
          case "ArrowDown":
            e.preventDefault();
            if (currentIndex < items.length - 1) {
              (_a = items[currentIndex]) == null ? void 0 : _a.classList.remove("is-selected");
              items[currentIndex + 1].classList.add("is-selected");
              items[currentIndex + 1].scrollIntoView({ block: "nearest" });
            }
            break;
          case "ArrowUp":
            e.preventDefault();
            if (currentIndex > 0) {
              (_b = items[currentIndex]) == null ? void 0 : _b.classList.remove("is-selected");
              items[currentIndex - 1].classList.add("is-selected");
              items[currentIndex - 1].scrollIntoView({ block: "nearest" });
            }
            break;
          case "Enter":
            e.preventDefault();
            const selectedItem = suggestionContainer.querySelector(".is-selected");
            if (selectedItem) {
              const path = selectedItem.textContent;
              if (path) {
                inputEl.value = path;
                this.plugin.settings.projectNotePath = path;
                this.plugin.saveSettings();
                suggestionContainer.style.display = "none";
              }
            }
            break;
          case "Escape":
            suggestionContainer.style.display = "none";
            break;
        }
      });
      document.addEventListener("click", (e) => {
        if (!inputEl.contains(e.target) && !suggestionContainer.contains(e.target)) {
          suggestionContainer.style.display = "none";
        }
      });
    });
    new import_obsidian.Setting(containerEl).setName("Callout Name").setDesc('Name of the callout block used for dream metrics (e.g., "dream-metrics")').addText((text) => text.setPlaceholder("dream-metrics").setValue(this.plugin.settings.calloutName).onChange(async (value) => {
      this.plugin.settings.calloutName = value.toLowerCase().replace(/\s+/g, "-");
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Selected Notes").setDesc("Notes to search for dream metrics (one per line)").addTextArea((text) => text.setPlaceholder("Journal/Journal.md\nDreams/2024.md").setValue(this.plugin.settings.selectedNotes.join("\n")).onChange(async (value) => {
      this.plugin.settings.selectedNotes = value.split("\n").filter((note) => note.trim());
      await this.plugin.saveSettings();
    }));
    containerEl.createEl("h3", { text: "Metrics Configuration" });
    this.plugin.settings.metrics.forEach((metric, index) => {
      const metricSetting = new import_obsidian.Setting(containerEl).setName(metric.name).setDesc(`Range: ${metric.range.min}-${metric.range.max}`).addExtraButton((button) => {
        const handle = button.setIcon("grip-vertical").setTooltip("Drag to reorder").extraSettingsEl;
        handle.addClass("oom-drag-handle");
        handle.setAttribute("draggable", "true");
        handle.addEventListener("dragstart", (e) => {
          if (e.dataTransfer) {
            e.dataTransfer.setData("text/plain", index.toString());
            handle.addClass("is-dragging");
          }
        });
        handle.addEventListener("dragend", () => {
          handle.removeClass("is-dragging");
        });
      });
      const settingEl = metricSetting.settingEl;
      settingEl.setAttribute("data-index", index.toString());
      settingEl.addEventListener("dragover", (e) => {
        e.preventDefault();
        const draggingEl = containerEl.querySelector(".is-dragging");
        if (draggingEl && draggingEl !== settingEl) {
          settingEl.addClass("oom-drop-target");
        }
      });
      settingEl.addEventListener("dragleave", () => {
        settingEl.removeClass("oom-drop-target");
      });
      settingEl.addEventListener("drop", async (e) => {
        var _a;
        e.preventDefault();
        settingEl.removeClass("oom-drop-target");
        const fromIndex = parseInt(((_a = e.dataTransfer) == null ? void 0 : _a.getData("text/plain")) || "-1");
        const toIndex = parseInt(settingEl.getAttribute("data-index") || "-1");
        if (fromIndex !== -1 && toIndex !== -1 && fromIndex !== toIndex) {
          const metrics = this.plugin.settings.metrics;
          const [movedMetric] = metrics.splice(fromIndex, 1);
          metrics.splice(toIndex, 0, movedMetric);
          await this.plugin.saveSettings();
          this.display();
        }
      });
      if (index > 0) {
        metricSetting.addExtraButton((button) => button.setIcon("arrow-up").setTooltip("Move up").onClick(async () => {
          const metrics = this.plugin.settings.metrics;
          [metrics[index], metrics[index - 1]] = [metrics[index - 1], metrics[index]];
          await this.plugin.saveSettings();
          this.display();
        }));
      }
      if (index < this.plugin.settings.metrics.length - 1) {
        metricSetting.addExtraButton((button) => button.setIcon("arrow-down").setTooltip("Move down").onClick(async () => {
          const metrics = this.plugin.settings.metrics;
          [metrics[index], metrics[index + 1]] = [metrics[index + 1], metrics[index]];
          await this.plugin.saveSettings();
          this.display();
        }));
      }
      metricSetting.addExtraButton((button) => button.setIcon("pencil").setTooltip("Edit metric").onClick(() => {
        new MetricEditorModal(
          this.app,
          metric,
          this.plugin.settings.metrics,
          async (updatedMetric) => {
            this.plugin.settings.metrics[index] = updatedMetric;
            await this.plugin.saveSettings();
            this.display();
          },
          true
        ).open();
      })).addExtraButton((button) => button.setIcon("trash").setTooltip("Remove metric").onClick(async () => {
        this.plugin.settings.metrics.splice(index, 1);
        await this.plugin.saveSettings();
        this.display();
      }));
    });
    new import_obsidian.Setting(containerEl).setName("Add New Metric").addButton((button) => button.setButtonText("Add Metric").onClick(() => {
      new MetricEditorModal(
        this.app,
        {
          name: "New Metric",
          range: { min: 1, max: 5 },
          description: "Description of the metric"
        },
        this.plugin.settings.metrics,
        async (newMetric) => {
          this.plugin.settings.metrics.push(newMetric);
          await this.plugin.saveSettings();
          this.display();
        }
      ).open();
    }));
    new import_obsidian.Setting(containerEl).setName("Reset to Defaults").setDesc("Restore default metrics while preserving custom metrics").addButton((button) => button.setButtonText("Reset").onClick(async () => {
      const defaultMetricNames = DEFAULT_METRICS.map((m) => m.name.toLowerCase());
      const customMetrics = this.plugin.settings.metrics.filter(
        (m) => !defaultMetricNames.includes(m.name.toLowerCase())
      );
      this.plugin.settings.metrics = [...DEFAULT_METRICS, ...customMetrics];
      await this.plugin.saveSettings();
      this.display();
    }));
  }
};

// main.ts
var DreamMetricsPlugin = class extends import_obsidian2.Plugin {
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new DreamMetricsSettingTab(this.app, this));
    this.addRibbonIcon("lucide-shell", "OneiroMetrics", () => {
      new OneiroMetricsModal(this.app, this).open();
    });
    this.addCommand({
      id: "open-oneirometrics-modal",
      name: "Open OneiroMetrics",
      callback: () => {
        new OneiroMetricsModal(this.app, this).open();
      }
    });
    this.addCommand({
      id: "scrape-metrics",
      name: "Scrape Metrics",
      callback: () => this.scrapeMetrics()
    });
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, {
      projectNotePath: "Dreams/Metrics.md",
      metrics: [...DEFAULT_METRICS],
      selectedNotes: [],
      calloutName: "dream-metrics"
    }, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  async scrapeMetrics() {
    const metrics = {};
    let totalWords = 0;
    let entriesProcessed = 0;
    for (const path of this.settings.selectedNotes) {
      const file = this.app.vault.getAbstractFileByPath(path);
      if (!(file instanceof import_obsidian2.TFile)) {
        console.log(`File not found or not a file: ${path}`);
        continue;
      }
      try {
        const content = await this.app.vault.read(file);
        const calloutMatch = content.match(/>\s*\[!${this.settings.calloutName}\]\s*\n>(.*?)(?=\n\n|\n[^>]|$)/s);
        if (calloutMatch) {
          const metricsText = calloutMatch[1].replace(/>\s*/g, "");
          const wordCount = content.split(/\s+/).length;
          totalWords += wordCount;
          entriesProcessed++;
          const metricPairs = metricsText.split(",").map((pair) => pair.trim());
          for (const pair of metricPairs) {
            const [name, value] = pair.split(":").map((s) => s.trim());
            if (name && !isNaN(Number(value))) {
              if (!metrics[name]) {
                metrics[name] = [];
              }
              metrics[name].push(Number(value));
            }
          }
        }
      } catch (error) {
        console.error(`Error processing file ${path}:`, error);
      }
    }
    if (entriesProcessed > 0) {
      const avgWords = Math.round(totalWords / entriesProcessed);
      metrics["Average Words"] = [avgWords];
    }
    await this.updateProjectNote(metrics);
  }
  extractDateFromNotePath(path) {
    const filename = path.split("/").pop() || "";
    const dateMatch = filename.match(/\d{4}-\d{2}-\d{2}/);
    return dateMatch ? dateMatch[0] : new Date().toISOString().split("T")[0];
  }
  extractTitleFromNotePath(path) {
    const filename = path.split("/").pop() || "";
    return filename.replace(/\.md$/, "");
  }
  async updateProjectNote(metrics) {
    const projectFile = this.app.vault.getAbstractFileByPath(this.settings.projectNotePath);
    if (!(projectFile instanceof import_obsidian2.TFile)) {
      console.log(`Project note not found: ${this.settings.projectNotePath}`);
      return;
    }
    try {
      const existingContent = await this.app.vault.read(projectFile);
      const tableMatch = existingContent.match(/(.*?)(# Dream Metrics.*?)(\n\n.*)/s);
      const beforeTable = tableMatch ? tableMatch[1] : "";
      const afterTable = tableMatch ? tableMatch[3] : "";
      const newContent = beforeTable + this.generateMetricsTable(metrics) + afterTable;
      if (newContent !== existingContent) {
        await this.backupProjectNote(projectFile);
        const confirmed = await this.confirmOverwrite();
        if (confirmed) {
          await this.app.vault.modify(projectFile, newContent);
          new import_obsidian2.Notice("Metrics table updated successfully!");
        }
      }
    } catch (error) {
      console.error("Error writing to project note:", error);
      new import_obsidian2.Notice("Error updating metrics table. Check console for details.");
    }
  }
  async backupProjectNote(file) {
    try {
      const content = await this.app.vault.read(file);
      const timestamp = new Date().toISOString().replace(/[:.]/g, "-");
      const backupPath = `${this.settings.projectNotePath}.${timestamp}.backup`;
      const existingBackup = this.app.vault.getAbstractFileByPath(backupPath);
      if (existingBackup) {
        await this.app.vault.delete(existingBackup);
      }
      await this.app.vault.create(backupPath, content);
      console.log(`Created backup at: ${backupPath}`);
    } catch (error) {
      console.error("Error creating backup:", error);
      new import_obsidian2.Notice("Error creating backup. Check console for details.");
    }
  }
  async confirmOverwrite() {
    return new Promise((resolve) => {
      const modal = new ConfirmModal(
        this.app,
        "Update Metrics Table",
        "This will overwrite the current metrics table. A backup will be created before proceeding. Continue?"
      );
      modal.onConfirm = () => {
        resolve(true);
      };
      modal.onCancel = () => {
        resolve(false);
      };
      modal.open();
    });
  }
  generateMetricsTable(metrics) {
    let table = "# OneiroMetrics Analysis\n\n";
    table += '<div class="oom-table-container">\n';
    table += '<table class="oom-table">\n';
    table += "<thead>\n";
    table += "<tr>\n";
    table += "<th>Metric</th>\n";
    table += "<th>Average</th>\n";
    table += "<th>Min</th>\n";
    table += "<th>Max</th>\n";
    table += "<th>Count</th>\n";
    table += "</tr>\n";
    table += "</thead>\n";
    table += "<tbody>\n";
    for (const [name, values] of Object.entries(metrics)) {
      if (values.length === 0)
        continue;
      const avg = values.reduce((a, b) => a + b) / values.length;
      const min = Math.min(...values);
      const max = Math.max(...values);
      table += "<tr>\n";
      table += `<td>${name}</td>
`;
      table += `<td>${avg.toFixed(2)}</td>
`;
      table += `<td>${min}</td>
`;
      table += `<td>${max}</td>
`;
      table += `<td>${values.length}</td>
`;
      table += "</tr>\n";
    }
    table += "</tbody>\n";
    table += "</table>\n";
    table += "</div>";
    return table;
  }
};
var OneiroMetricsModal = class extends import_obsidian2.Modal {
  constructor(app, plugin) {
    super(app);
    this.plugin = plugin;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.addClass("oom-modal");
    contentEl.createEl("h2", { text: "OneiroMetrics" });
    new import_obsidian2.Setting(contentEl).setName("Project Note Path").addSearch((text) => {
      text.setValue(this.plugin.settings.projectNotePath).onChange((value) => {
        this.plugin.settings.projectNotePath = value;
      });
      text.inputEl.addClass("oom-file-suggestion");
      text.inputEl.setAttribute("data-suggestion", "file");
    });
    new import_obsidian2.Setting(contentEl).setName("Selected Notes").addTextArea((text) => text.setValue(this.plugin.settings.selectedNotes.join("\n")).onChange((value) => {
      this.plugin.settings.selectedNotes = value.split("\n").filter((note) => note.trim());
    }));
    new import_obsidian2.Setting(contentEl).setName("Callout Name").addText((text) => text.setValue(this.plugin.settings.calloutName).onChange((value) => {
      this.plugin.settings.calloutName = value.toLowerCase().replace(/\s+/g, "-");
    }));
    new import_obsidian2.Setting(contentEl).setName("Scrape Metrics").addButton((button) => button.setButtonText("Scrape").onClick(async () => {
      await this.plugin.scrapeMetrics();
      new import_obsidian2.Notice("Metrics scraped successfully!");
      this.close();
    }));
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var ConfirmModal = class extends import_obsidian2.Modal {
  constructor(app, title, message) {
    super(app);
    this.title = title;
    this.message = message;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.addClass("oom-confirm-modal");
    contentEl.createEl("h2", { text: this.title });
    contentEl.createEl("p", { text: this.message });
    const buttonContainer = contentEl.createEl("div", { cls: "oom-modal-buttons" });
    new import_obsidian2.ButtonComponent(buttonContainer).setButtonText("Cancel").onClick(() => {
      this.onCancel();
      this.close();
    });
    new import_obsidian2.ButtonComponent(buttonContainer).setButtonText("Continue").setCta().onClick(() => {
      this.onConfirm();
      this.close();
    });
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
