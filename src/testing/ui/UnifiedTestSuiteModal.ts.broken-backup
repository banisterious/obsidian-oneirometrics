/**
 * UnifiedTestSuiteModal
 * 
 * A consolidated test suite modal that brings together all testing functionality
 * from various individual test modals into a single, organized interface.
 * 
 * Consolidates:
 * - Performance Testing (ScrapingPerformanceTestModal)
 * - Date Navigator Testing
 * - Universal Worker Pool Testing  
 * - Universal Filter Manager Testing
 * - Metrics Calculator Testing
 * - Web Worker Testing
 * - Journal Structure Validation
 * - General Diagnostics and Tools
 */

import { App, Modal, Setting, ButtonComponent, Notice } from 'obsidian';
import { getLogger } from '../../logging';

// Import existing test functionality
import { DummyDataGenerator } from '../utils/DummyDataGenerator';

// Types for test results and state
interface TestResult {
    testName: string;
    status: 'success' | 'failure' | 'warning' | 'running';
    duration?: number;
    details?: string;
    timestamp: Date;
}

interface TestSuiteState {
    isRunning: boolean;
    currentTest: string | null;
    results: TestResult[];
    selectedCategory: string;
}

export class UnifiedTestSuiteModal extends Modal {
    private tabsContainer: HTMLElement;
    private contentContainer: HTMLElement;
    private selectedTab: string | null = null;
    private logger = getLogger('UnifiedTestSuiteModal');
    
    // Test suite state
    private testState: TestSuiteState = {
        isRunning: false,
        currentTest: null,
        results: [],
        selectedCategory: 'performance'
    };
    
    // Test infrastructure
    private dummyDataGenerator: DummyDataGenerator;
    
    constructor(app: App, private plugin: any) {
        super(app);
        this.dummyDataGenerator = new DummyDataGenerator();
    }
    
    onOpen() {
        try {
            const { contentEl } = this;
            contentEl.empty();
            contentEl.addClass('unified-test-suite-modal');
            
            // Create header
            contentEl.createEl('h1', { 
                text: 'OneiroMetrics Test Suite', 
                cls: 'unified-test-suite-header' 
            });
            
            // Create description
            contentEl.createEl('p', {
                text: 'Comprehensive testing and diagnostics for all OneiroMetrics functionality.',
                cls: 'unified-test-suite-description'
            });
            
            // Create two-column layout
            const modalContainer = contentEl.createDiv({ 
                cls: 'unified-test-suite-container' 
            });
            
            this.tabsContainer = modalContainer.createDiv({ 
                cls: 'unified-test-suite-sidebar' 
            });
            
            this.contentContainer = modalContainer.createDiv({ 
                cls: 'unified-test-suite-content' 
            });
            
            // Build tabs
            this.createTabs();
            
            // Select Dashboard tab by default
            this.selectTab('dashboard');
            
        } catch (error) {
            this.logger.error('Error opening unified test suite modal', (error as Error).message);
        }
    }
    
    onClose() {
        const { contentEl } = this;
        contentEl.empty();
        
        // Stop any running tests
        this.testState.isRunning = false;
    }
    
    // Create all tabs
    private createTabs() {
        // Main overview
        this.createDashboardTab();
        
        // Core testing categories
        this.createTestGroup('System Diagnostics', [
            { id: 'test-logging', name: 'Logging', description: 'Test logging infrastructure and manage log data' },
            { id: 'test-web-workers', name: 'Web Workers', description: 'Test web worker functionality' },
            { id: 'test-state-management', name: 'State Management', description: 'Test plugin state handling' }
        ]);
        
        this.createTestGroup('Performance Testing', [
            { id: 'performance-scraping', name: 'Scraping Performance', description: 'Test data scraping performance with various dataset sizes' },
            { id: 'performance-memory', name: 'Memory Analysis', description: 'Memory usage and leak detection' },
            { id: 'performance-scaling', name: 'Scaling Tests', description: 'Test performance across different data scales' }
        ]);
        
        this.createTestGroup('Component Testing', [
            { id: 'test-date-navigator', name: 'Date Navigator', description: 'Test date navigation and selection functionality' },
            { id: 'test-worker-pool', name: 'Worker Pool', description: 'Test universal worker pool operations' },
            { id: 'test-filter-manager', name: 'Filter Manager', description: 'Test universal filter management' },
            { id: 'test-metrics-calculator', name: 'Metrics Calculator', description: 'Test universal metrics calculation' }
        ]);
        
        this.createTestGroup('Validation & Structure', [
            { id: 'test-journal-structure', name: 'Journal Structure', description: 'Validate journal structure and parsing' },
            { id: 'test-data-integrity', name: 'Data Integrity', description: 'Verify data consistency and accuracy' },
            { id: 'test-settings', name: 'Settings Validation', description: 'Test plugin settings and configuration' }
        ]);
        
        // Utilities and tools
        this.createUtilitiesTab();
        this.createHelpTab();
    }
    
    // Create Dashboard tab
    private createDashboardTab() {
        const dashboardTab = this.tabsContainer.createDiv({
            cls: 'vertical-tab-nav-item unified-test-suite-tab-nav-item',
            attr: { 'data-tab-id': 'dashboard' }
        });
        
        dashboardTab.createDiv({ 
            text: 'Test Dashboard', 
            cls: 'unified-test-suite-tab-label' 
        });
        
        dashboardTab.addEventListener('click', () => {
            this.selectTab('dashboard');
        });
    }
    
    // Create Utilities tab
    private createUtilitiesTab() {
        const utilitiesTab = this.tabsContainer.createDiv({
            cls: 'vertical-tab-nav-item unified-test-suite-tab-nav-item',
            attr: { 'data-tab-id': 'utilities' }
        });
        
        utilitiesTab.createDiv({ 
            text: 'Test Utilities', 
            cls: 'unified-test-suite-tab-label' 
        });
        
        utilitiesTab.addEventListener('click', () => {
            this.selectTab('utilities');
        });
    }
    
    // Create Help tab
    private createHelpTab() {
        const helpTab = this.tabsContainer.createDiv({
            cls: 'vertical-tab-nav-item unified-test-suite-tab-nav-item',
            attr: { 'data-tab-id': 'help' }
        });
        
        helpTab.createDiv({ 
            text: 'Help & Documentation', 
            cls: 'unified-test-suite-tab-label' 
        });
        
        helpTab.addEventListener('click', () => {
            this.selectTab('help');
        });
    }
    
    // Helper to create a group of test tabs
    private createTestGroup(groupName: string, tests: Array<{id: string, name: string, description: string}>) {
        // Create group header
        const groupHeader = this.tabsContainer.createDiv({ 
            text: groupName,
            cls: 'vertical-tab-header-group-title unified-test-suite-tab-group-title' 
        });
        
        // Create tabs for each test in the group
        tests.forEach(test => {
            this.createTestTab(test);
        });
    }
    
    // Create a tab for an individual test
    private createTestTab(test: {id: string, name: string, description: string}) {
        const testTab = this.tabsContainer.createDiv({
            cls: 'vertical-tab-nav-item unified-test-suite-tab-nav-item',
            attr: { 'data-tab-id': test.id }
        });
        
        testTab.createDiv({ 
            text: test.name, 
            cls: 'unified-test-suite-tab-label' 
        });
        
        testTab.addEventListener('click', () => {
            this.selectTab(test.id);
        });
    }
    
    // Main tab selection logic
    public selectTab(tabId: string) {
        this.selectedTab = tabId;
        
        // Update tab active states
        this.tabsContainer.querySelectorAll('.vertical-tab-nav-item').forEach(tab => {
            tab.removeClass('is-active');
        });
        
        const selectedTabEl = this.tabsContainer.querySelector(`[data-tab-id="${tabId}"]`);
        if (selectedTabEl) {
            selectedTabEl.addClass('is-active');
        }
        
        // Load content based on selected tab
        this.contentContainer.empty();
        
        switch (tabId) {
            case 'dashboard':
                this.loadDashboardContent();
                break;
            case 'performance-scraping':
                this.loadPerformanceTestContent('performance-scraping');
                break;
            case 'performance-memory':
                this.loadPerformanceTestContent('performance-memory');
                break;
            case 'performance-scaling':
                this.loadPerformanceTestContent('performance-scaling');
                break;
            case 'test-date-navigator':
                this.loadComponentTestContent('test-date-navigator');
                break;
            case 'test-logging':
                this.loadLoggingContent();
                // Refresh log level display when loading logging content
                this.refreshLogLevelDisplay();
                break;
            case 'utilities':
                this.loadUtilitiesContent();
                break;
            case 'help':
                this.loadHelpContent();
                break;
            default:
                // Handle specific performance tests
                if (tabId.startsWith('performance-')) {
                    this.loadPerformanceTestContent(tabId);
                } else if (tabId.startsWith('test-')) {
                    this.loadComponentTestContent(tabId);
                }
                break;
        }
    }
    
    // Dashboard content
    private loadDashboardContent() {
        this.contentContainer.empty();
        
        this.contentContainer.createEl('h2', { 
            text: 'Test Suite Dashboard', 
            cls: 'unified-test-suite-content-header' 
        });
        
        this.contentContainer.createEl('p', {
            text: 'Welcome to the OneiroMetrics Test Suite. Monitor overall test status and run comprehensive test suites.',
            cls: 'unified-test-suite-content-description'
        });
        
        // Test status overview
        const statusContainer = this.contentContainer.createDiv({ cls: 'unified-test-suite-dashboard-stats' });
        
        this.createStatWidget(statusContainer, 'Total Tests', this.testState.results.length.toString());
        this.createStatWidget(statusContainer, 'Test Status', this.testState.isRunning ? 'Running' : 'Idle');
        this.createStatWidget(statusContainer, 'Last Run', this.getLastTestTime());
        this.createStatWidget(statusContainer, 'Success Rate', this.getSuccessRate());
        
        // Quick actions
        const actionsContainer = this.contentContainer.createDiv({ cls: 'unified-test-suite-dashboard-actions' });
        actionsContainer.createEl('h3', { text: 'Quick Actions' });
        
        this.createActionButton(actionsContainer, 'Run All Performance Tests', 'zap', () => {
            this.runTestSuite('performance');
        });
        
        this.createActionButton(actionsContainer, 'Run Component Tests', 'cog', () => {
            this.runTestSuite('components');
        });
        
        this.createActionButton(actionsContainer, 'Run Validation Tests', 'check-circle', () => {
            this.runTestSuite('validation');
        });
        
        this.createActionButton(actionsContainer, 'Clear Test Results', 'trash-2', () => {
            this.clearTestResults();
        });
        
        // Recent test results
        this.loadRecentTestResults();
    }
    
    // Performance test content
    private loadPerformanceTestContent(testId: string) {
        this.contentContainer.empty();
        
        const testTitle = this.getTestTitle(testId);
        this.contentContainer.createEl('h2', { 
            text: testTitle, 
            cls: 'unified-test-suite-content-header' 
        });
        
        if (testId === 'performance-scraping') {
            this.loadScrapingPerformanceTest();
        } else if (testId === 'performance-memory') {
            this.loadMemoryAnalysisTest();
        } else if (testId === 'performance-scaling') {
            this.loadScalingTest();
        } else {
            // Fallback for unknown performance tests
            this.contentContainer.createEl('p', {
                text: `Performance test content for ${testTitle} is being loaded...`,
                cls: 'unified-test-suite-content-description'
            });
            
            const runButton = this.contentContainer.createEl('button', { 
                text: `Run ${testTitle}`, 
                cls: 'mod-cta' 
            });
            runButton.onclick = () => this.runIndividualTest(testId);
        }
    }
    
    // Component test content
    private loadComponentTestContent(testId: string) {
        this.contentContainer.empty();
        
        const testTitle = this.getTestTitle(testId);
        this.contentContainer.createEl('h2', { 
            text: testTitle, 
            cls: 'unified-test-suite-content-header' 
        });
        
        // Special handling for logging tab
        if (testId === 'test-logging') {
            this.loadLoggingContent();
            return;
        }
        
        // Generic component test interface
        this.contentContainer.createEl('p', {
            text: `Test interface for ${testTitle}. This integrates the functionality from the individual test modal.`,
            cls: 'unified-test-suite-content-description'
        });
        
        // Test controls
        const controlsContainer = this.contentContainer.createDiv({ cls: 'unified-test-suite-test-controls' });
        
        const runButton = controlsContainer.createEl('button', { 
            text: `Run ${testTitle}`, 
            cls: 'mod-cta' 
        });
        runButton.onclick = () => this.runIndividualTest(testId);
        
        // Test results area
        const resultsContainer = this.contentContainer.createDiv({ cls: 'unified-test-suite-test-results' });
        resultsContainer.createEl('h3', { text: 'Test Results' });
        
        const resultsArea = resultsContainer.createEl('div', { cls: 'unified-test-suite-results-area' });
        resultsArea.createEl('p', { text: 'No test results yet. Click "Run Test" to begin.' });
    }
    
    // Scraping performance test (from ScrapingPerformanceTestModal)
    private loadScrapingPerformanceTest() {
        this.contentContainer.createEl('p', {
            text: 'Test scraping performance with various dataset sizes and configurations.',
            cls: 'unified-test-suite-content-description'
        });
        
        // Folder selection section
        const folderSection = this.contentContainer.createDiv({ cls: 'unified-test-suite-folder-section' });
        folderSection.createEl('h3', { text: 'Target Folder Configuration' });
        
        const folderContainer = folderSection.createDiv({ cls: 'unified-test-suite-setting-item' });
        folderContainer.createEl('label', { 
            text: 'Test Folder:',
            cls: 'unified-test-suite-setting-label'
        });
        
        const folderSelect = folderContainer.createEl('select', { 
            cls: 'unified-test-suite-folder-select' 
        });
        
        // Add test data folder option
        const plugin = this.plugin as any;
        const testDataFolder = plugin.settings?.testDataFolder || 'Test Data/Dreams';
        
        // Add current selected folder option
        const currentFolder = plugin.settings?.selectedFolder || '';
        
        const folderOptions = [
            { value: testDataFolder, label: `Test Data (${testDataFolder})` },
            { value: currentFolder, label: currentFolder ? `Current Selection (${currentFolder})` : 'No folder selected' },
            { value: 'custom', label: 'Custom folder path...' }
        ].filter(option => option.value); // Remove empty options
        
        folderOptions.forEach(folder => {
            const option = folderSelect.createEl('option', { 
                text: folder.label,
                value: folder.value
            });
        });
        
        folderSelect.value = testDataFolder; // Default to test data folder
        
        // Custom folder input (hidden by default)
        const customFolderContainer = folderSection.createDiv({ 
            cls: 'unified-test-suite-custom-folder-container',
            attr: { style: 'display: none;' }
        });
        const customFolderInput = customFolderContainer.createEl('input', {
            type: 'text',
            placeholder: 'Enter custom folder path...',
            cls: 'unified-test-suite-custom-folder-input'
        });
        
        folderSelect.addEventListener('change', () => {
            if (folderSelect.value === 'custom') {
                customFolderContainer.style.display = 'block';
            } else {
                customFolderContainer.style.display = 'none';
            }
        });
        
        // Performance settings info
        const perfInfoSection = this.contentContainer.createDiv({ cls: 'unified-test-suite-perf-info' });
        const perfSettings = plugin.settings?.performanceTesting;
        const isPerformanceMode = perfSettings?.enabled ?? false;
        const maxFiles = perfSettings?.maxFiles ?? 0;
        
        if (isPerformanceMode) {
            const limitText = maxFiles > 0 ? `${maxFiles} files` : 'unlimited files';
            perfInfoSection.createEl('p', {
                text: `✅ Performance testing mode active - will process ${limitText}`,
                cls: 'unified-test-suite-helper-text'
            });
        } else {
            perfInfoSection.createEl('p', {
                text: '⚠️ Performance testing mode disabled - limited to 200 files. Enable in Settings or Utilities tab.',
                cls: 'unified-test-suite-helper-text'
            });
        }
        
        // Quick test buttons
        const quickTestsContainer = this.contentContainer.createDiv({ cls: 'unified-test-suite-quick-tests' });
        quickTestsContainer.createEl('h3', { text: 'Performance Tests' });
        
        const testSizes = [
            { name: 'Small (500 entries)', size: 500 },
            { name: 'Medium (1K entries)', size: 1000 },
            { name: 'Large (5K entries)', size: 5000 },
            { name: 'Extra Large (10K entries)', size: 10000 }
        ];
        
        testSizes.forEach(test => {
            const button = quickTestsContainer.createEl('button', { 
                text: test.name, 
                cls: 'unified-test-suite-quick-test-button' 
            });
            button.onclick = () => {
                const targetFolder = folderSelect.value === 'custom' ? customFolderInput.value : folderSelect.value;
                this.runScrapingPerformanceTest(test.size, targetFolder);
            };
        });
        
        // Results display area
        const resultsContainer = this.contentContainer.createDiv({ cls: 'unified-test-suite-results-container' });
        resultsContainer.createEl('h3', { text: 'Test Results' });
        
        const resultsArea = resultsContainer.createDiv({ 
            cls: 'unified-test-suite-results-area',
            attr: { id: 'scraping-performance-results' }
        });
        resultsArea.createEl('p', {
            text: 'Run a performance test to see results here.',
            cls: 'unified-test-suite-placeholder-text'
        });
    }
    
    // Memory analysis test
    private loadMemoryAnalysisTest() {
        this.contentContainer.createEl('p', {
            text: 'Analyze memory usage patterns and detect potential memory leaks.',
            cls: 'unified-test-suite-content-description'
        });
        
        // Memory test options
        const memoryTestsContainer = this.contentContainer.createDiv({ cls: 'unified-test-suite-memory-tests' });
        memoryTestsContainer.createEl('h3', { text: 'Memory Analysis Tests' });
        
        this.createTestButton(memoryTestsContainer, 'Memory Usage Baseline', () => {
            this.runMemoryTest('baseline');
        });
        
        this.createTestButton(memoryTestsContainer, 'Memory Leak Detection', () => {
            this.runMemoryTest('leak-detection');
        });
        
        this.createTestButton(memoryTestsContainer, 'Garbage Collection Analysis', () => {
            this.runMemoryTest('gc-analysis');
        });
    }
    
    // Scaling test
    private loadScalingTest() {
        this.contentContainer.createEl('p', {
            text: 'Test performance scaling across different data sizes and complexity levels.',
            cls: 'unified-test-suite-content-description'
        });
        
        // Scaling test configurations
        const scalingContainer = this.contentContainer.createDiv({ cls: 'unified-test-suite-scaling-tests' });
        scalingContainer.createEl('h3', { text: 'Scaling Test Configurations' });
        
        this.createTestButton(scalingContainer, 'Linear Scaling Test', () => {
            this.runScalingTest('linear');
        });
        
        this.createTestButton(scalingContainer, 'Exponential Scaling Test', () => {
            this.runScalingTest('exponential');
        });
        
        this.createTestButton(scalingContainer, 'Complex Data Scaling Test', () => {
            this.runScalingTest('complex');
        });
    }
    
    // Logging content (moved from utilities)
    private loadLoggingContent() {
        this.contentContainer.createEl('p', {
            text: 'Manage logging infrastructure, view logs, and export log data.',
            cls: 'unified-test-suite-content-description'
        });
        
        // Logging settings section
        const settingsContainer = this.contentContainer.createDiv({ cls: 'unified-test-suite-logging-settings' });
        settingsContainer.createEl('h3', { text: 'Logging Settings' });
        
        // Log level setting
        const logLevelContainer = settingsContainer.createDiv({ cls: 'unified-test-suite-setting-item' });
        logLevelContainer.createEl('label', { 
            text: 'Log Level:',
            cls: 'unified-test-suite-setting-label'
        });
        
        const logLevelSelect = logLevelContainer.createEl('select', { 
            cls: 'unified-test-suite-log-level-select' 
        });
        
        // Add log level options (excluding 'off')
        const logLevels = [
            { value: 'errors', label: 'Error' },
            { value: 'warn', label: 'Warning' },
            { value: 'info', label: 'Info' },
            { value: 'debug', label: 'Debug' },
            { value: 'trace', label: 'Trace' }
        ];
        
        logLevels.forEach(level => {
            const option = logLevelSelect.createEl('option', { 
                text: level.label,
                value: level.value
            });
        });
        
        // Set current log level
        const currentLogLevel = (this.plugin as any).settings?.logging?.level || 'info';
        logLevelSelect.value = currentLogLevel;
        
        // Debug logging to track log level reading
        console.log(`[OneiroMetrics Debug] Test Suite reading log level: ${currentLogLevel}`);
        console.log(`[OneiroMetrics Debug] Full logging settings:`, (this.plugin as any).settings?.logging);
        
        // Add change handler
        logLevelSelect.addEventListener('change', () => {
            this.updateLogLevel(logLevelSelect.value as any);
        });
        
        // Helper text
        const helperText = settingsContainer.createDiv({ cls: 'unified-test-suite-setting-helper' });
        helperText.createEl('p', {
            text: 'Note: To turn logging off completely, go to Settings → OneiroMetrics → Logging → Level and select "Off".',
            cls: 'unified-test-suite-helper-text'
        });
        
        // Logging test controls
        const testingContainer = this.contentContainer.createDiv({ cls: 'unified-test-suite-logging-testing' });
        testingContainer.createEl('h3', { text: 'Logging System Tests' });
        
        this.createTestButton(testingContainer, 'Test Log Levels', () => {
            this.testLogLevels();
        });
        
        this.createTestButton(testingContainer, 'Test Memory Adapter', () => {
            this.testMemoryAdapter();
        });
        
        this.createTestButton(testingContainer, 'Test Log Persistence', () => {
            this.testLogPersistence();
        });
        
        // Log management utilities
        const managementContainer = this.contentContainer.createDiv({ cls: 'unified-test-suite-log-management' });
        managementContainer.createEl('h3', { text: 'Log Management' });
        
        this.createUtilityButton(managementContainer, 'Open Log Viewer', 'file-text', () => {
            this.openLogViewer();
        });
        
        this.createUtilityButton(managementContainer, 'Export Logs to File', 'download', () => {
            this.exportLogsToFile();
        });
        
        this.createUtilityButton(managementContainer, 'Copy Recent Logs to Clipboard', 'copy', () => {
            this.copyRecentLogsToClipboard();
        });
        
        this.createUtilityButton(managementContainer, 'Clear Logs', 'trash', () => {
            this.clearLogs();
        });
        
        // Log statistics
        const statsContainer = this.contentContainer.createDiv({ cls: 'unified-test-suite-log-stats' });
        statsContainer.createEl('h3', { text: 'Log Statistics' });
        
        this.loadLogStatistics(statsContainer);
    }
    
    // Utilities content (updated to remove logging section)
    private loadUtilitiesContent() {
        this.contentContainer.empty();
        
        this.contentContainer.createEl('h2', { 
            text: 'Test Utilities & Tools', 
            cls: 'unified-test-suite-content-header' 
        });
        
        this.contentContainer.createEl('p', {
            text: 'Utility tools for test data generation, cleanup, and analysis.',
            cls: 'unified-test-suite-content-description'
        });
        
        // Utility sections
        const utilitiesContainer = this.contentContainer.createDiv({ cls: 'unified-test-suite-utilities-container' });
        
        // Data generation utilities
        const dataGenSection = utilitiesContainer.createDiv({ cls: 'unified-test-suite-utility-section' });
        dataGenSection.createEl('h3', { text: 'Data Generation' });
        
        // Add description of test data generation
        dataGenSection.createEl('p', {
            text: 'Generate realistic dream journal entries for testing OneiroMetrics functionality. Creates notes with varied content, realistic metrics, and proper callout structure.',
            cls: 'unified-test-suite-utility-description'
        });
        
        // Test data folder configuration
        const folderConfigContainer = dataGenSection.createDiv({ cls: 'unified-test-suite-folder-config' });
        folderConfigContainer.createEl('label', { 
            text: 'Test Data Folder:',
            cls: 'unified-test-suite-setting-label'
        });
        
        const folderInput = folderConfigContainer.createEl('input', { 
            type: 'text',
            placeholder: 'Test Data/Dreams',
            cls: 'unified-test-suite-folder-input'
        });
        
        // Get current test data folder or use default
        const currentTestFolder = (this.plugin as any).settings?.testDataFolder || 'Test Data/Dreams';
        folderInput.value = currentTestFolder;
        
        folderInput.addEventListener('change', async () => {
            const plugin = this.plugin as any;
            if (plugin.settings) {
                plugin.settings.testDataFolder = folderInput.value;
                await plugin.saveSettings();
                new Notice(`Test data folder updated: ${folderInput.value}`);
            }
        });
        
        folderConfigContainer.createEl('p', {
            text: 'Notes will be created in this folder. Folder will be created automatically if it doesn\'t exist.',
            cls: 'unified-test-suite-helper-text'
        });
        
        // Template selection dropdown
        const templateConfigContainer = dataGenSection.createDiv({ cls: 'unified-test-suite-template-config' });
        templateConfigContainer.createEl('label', { 
            text: 'Template (optional):',
            cls: 'unified-test-suite-setting-label'
        });
        
        const templateSelect = templateConfigContainer.createEl('select', { 
            cls: 'unified-test-suite-template-select'
        });
        
        // Add default option
        templateSelect.createEl('option', {
            value: '',
            text: 'Use default format (no template)'
        });
        
        // Get existing OneiroMetrics templates from Hub
        const existingTemplates = (this.plugin as any).settings?.linting?.templates || [];
        
        if (existingTemplates.length > 0) {
            // Add separator
            templateSelect.createEl('option', {
                value: '',
                text: '──────────────',
                attr: { disabled: 'true' }
            });
            
            // Add each template
            existingTemplates.forEach((template: any) => {
                templateSelect.createEl('option', {
                    value: template.id,
                    text: template.name
                });
            });
        }
        
        // Get current template or use default
        const currentTemplate = (this.plugin as any).settings?.testDataTemplate || '';
        templateSelect.value = currentTemplate;
        
        templateSelect.addEventListener('change', async () => {
            const plugin = this.plugin as any;
            if (plugin.settings) {
                plugin.settings.testDataTemplate = templateSelect.value;
                await plugin.saveSettings();
                
                const selectedText = templateSelect.options[templateSelect.selectedIndex].text;
                new Notice(`Template updated: ${selectedText}`);
            }
        });
        
        templateConfigContainer.createEl('p', {
            text: existingTemplates.length > 0 
                ? 'Select a template created in Hub → Journal Structure, or use default format. Available placeholders: {{date}} (2025-01-15), {{date-long}} (January 15, 2025), {{date-month-day}} (January 15), {{date-compact}} / {{date-ref}} (20250115), {{title}}, {{content}}, {{metrics}}, or individual metric names.'
                : 'No OneiroMetrics templates found. Create templates in Hub → Journal Structure to use them here. Use placeholders like {{date}}, {{date-long}}, {{date-month-day}}, {{date-compact}}, {{title}}, {{content}} in your templates.',
            cls: 'unified-test-suite-helper-text'
        });
        
        // Generation buttons with presets
        const generationButtons = dataGenSection.createDiv({ cls: 'unified-test-suite-generation-buttons' });
        
        this.createUtilityButton(generationButtons, 'Small Dataset (500 entries)', 'database', () => {
            this.generateTestData('small');
        });
        
        this.createUtilityButton(generationButtons, 'Medium Dataset (1,000 entries)', 'database', () => {
            this.generateTestData('medium');
        });
        
        this.createUtilityButton(generationButtons, 'Large Dataset (5,000 entries)', 'database', () => {
            this.generateTestData('large');
        });
        
        this.createUtilityButton(generationButtons, 'Custom Dataset', 'settings', () => {
            this.showCustomDatasetDialog();
        });
        
        this.createUtilityButton(generationButtons, 'Count Test Files', 'hash', () => {
            this.countTestFiles();
        });
        
        this.createUtilityButton(dataGenSection, 'Export Test Results', 'download', () => {
            this.exportTestResults();
        });
        
        // Performance Testing utilities
        const performanceSection = utilitiesContainer.createDiv({ cls: 'unified-test-suite-utility-section' });
        performanceSection.createEl('h3', { text: 'Performance Testing Mode' });
        
        performanceSection.createEl('p', {
            text: 'Performance testing mode removes or increases the normal 200-file limit for scraping operations. Enable this for testing with large datasets.',
            cls: 'unified-test-suite-utility-description'
        });
        
        // Performance mode toggle
        const perfModeContainer = performanceSection.createDiv({ cls: 'unified-test-suite-perf-mode-config' });
        perfModeContainer.createEl('label', { 
            text: 'Performance Testing Mode:',
            cls: 'unified-test-suite-setting-label'
        });
        
        const perfModeCheckbox = perfModeContainer.createEl('input', { 
            type: 'checkbox',
            cls: 'unified-test-suite-perf-mode-checkbox'
        });
        
        // Get current performance testing settings
        const plugin = this.plugin as any;
        const currentPerfSettings = plugin.settings?.performanceTesting || { enabled: false, maxFiles: 0, showWarnings: true };
        perfModeCheckbox.checked = currentPerfSettings.enabled;
        
        // Max files setting
        const maxFilesContainer = performanceSection.createDiv({ cls: 'unified-test-suite-max-files-config' });
        maxFilesContainer.createEl('label', { 
            text: 'Max Files (0 = unlimited):',
            cls: 'unified-test-suite-setting-label'
        });
        
        const maxFilesInput = maxFilesContainer.createEl('input', { 
            type: 'number',
            cls: 'unified-test-suite-max-files-input',
            placeholder: '0'
        });
        maxFilesInput.setAttribute('min', '0');
        maxFilesInput.setAttribute('max', '50000');
        maxFilesInput.value = currentPerfSettings.maxFiles.toString();
        
        // Show warnings toggle
        const warningsContainer = performanceSection.createDiv({ cls: 'unified-test-suite-warnings-config' });
        warningsContainer.createEl('label', { 
            text: 'Show Performance Warnings:',
            cls: 'unified-test-suite-setting-label'
        });
        
        const warningsCheckbox = warningsContainer.createEl('input', { 
            type: 'checkbox',
            cls: 'unified-test-suite-warnings-checkbox'
        });
        warningsCheckbox.checked = currentPerfSettings.showWarnings;
        
        // Update handler for performance mode
        const updatePerformanceSettings = async () => {
            const plugin = this.plugin as any;
            if (plugin.settings) {
                if (!plugin.settings.performanceTesting) {
                    plugin.settings.performanceTesting = {};
                }
                
                plugin.settings.performanceTesting.enabled = perfModeCheckbox.checked;
                plugin.settings.performanceTesting.maxFiles = parseInt(maxFilesInput.value) || 0;
                plugin.settings.performanceTesting.showWarnings = warningsCheckbox.checked;
                
                await plugin.saveSettings();
                
                // Show status message
                const status = perfModeCheckbox.checked ? 'enabled' : 'disabled';
                const limitText = perfModeCheckbox.checked 
                    ? (plugin.settings.performanceTesting.maxFiles > 0 
                        ? `(limit: ${plugin.settings.performanceTesting.maxFiles} files)` 
                        : '(unlimited files)')
                    : '(200 file limit)';
                    
                new Notice(`Performance testing mode ${status} ${limitText}`);
            }
        };
        
        perfModeCheckbox.addEventListener('change', updatePerformanceSettings);
        maxFilesInput.addEventListener('change', updatePerformanceSettings);
        warningsCheckbox.addEventListener('change', updatePerformanceSettings);
        
        // Status display
        const statusContainer = performanceSection.createDiv({ cls: 'unified-test-suite-perf-status' });
        const updateStatusDisplay = () => {
            statusContainer.empty();
            
            const isEnabled = perfModeCheckbox.checked;
            const maxFiles = parseInt(maxFilesInput.value) || 0;
            
            if (isEnabled) {
                const limitText = maxFiles > 0 ? `${maxFiles} files` : 'unlimited files';
                statusContainer.createEl('p', {
                    text: `⚠️ Performance mode active - processing ${limitText}`,
                    cls: 'unified-test-suite-perf-warning'
                });
            } else {
                statusContainer.createEl('p', {
                    text: '✅ Normal mode - processing limited to 200 files',
                    cls: 'unified-test-suite-perf-normal'
                });
            }
        };
        
        // Initial status update
        updateStatusDisplay();
        
        // Update status when settings change
        perfModeCheckbox.addEventListener('change', updateStatusDisplay);
        maxFilesInput.addEventListener('input', updateStatusDisplay);
        
        // Cleanup utilities
        const cleanupSection = utilitiesContainer.createDiv({ cls: 'unified-test-suite-utility-section' });
        cleanupSection.createEl('h3', { text: 'Cleanup & Maintenance' });
        
        this.createUtilityButton(cleanupSection, 'Clear All Caches', 'trash', () => {
            this.clearAllCaches();
        });
        
        this.createUtilityButton(cleanupSection, 'Reset Test Environment', 'refresh-cw', () => {
            this.resetTestEnvironment();
        });
        
        this.createUtilityButton(cleanupSection, 'Clear Test Data Folder', 'trash-2', () => {
            this.clearTestDataFolder();
        });
    }
    
    // Help content
    private loadHelpContent() {
        this.contentContainer.empty();
        
        this.contentContainer.createEl('h2', { 
            text: 'Test Suite Documentation', 
            cls: 'unified-test-suite-content-header' 
        });
        
        const helpContent = `
## Getting Started

The Unified Test Suite consolidates all OneiroMetrics testing functionality into a single interface.

### Test Categories

- **Performance Testing**: Measure scraping speed, memory usage, and scaling behavior
- **Component Testing**: Validate individual plugin components and features  
- **Validation & Structure**: Ensure data integrity and journal structure compliance
- **System Diagnostics**: Test underlying systems like web workers and logging

### Running Tests

1. **Individual Tests**: Navigate to specific test tabs and click "Run Test"
2. **Test Suites**: Use the Dashboard to run entire categories of tests
3. **Custom Configuration**: Many tests allow custom parameters and options

### Best Practices

- Run performance tests in a clean environment for accurate results
- Use small datasets for initial testing, scale up as needed
- Monitor memory usage during long-running tests
- Clear caches between test runs for consistent results

### Interpreting Results

- **Success**: Test completed without errors
- **Warning**: Test completed with minor issues or performance concerns
- **Failure**: Test failed due to errors or unmet requirements
- **Running**: Test is currently in progress
        `;
        
        const helpDiv = this.contentContainer.createDiv({ cls: 'unified-test-suite-help-content' });
        
        // Simple markdown-like rendering
        const lines = helpContent.trim().split('\n');
        let currentList: HTMLElement | null = null;
        
        lines.forEach(line => {
            if (line.startsWith('## ')) {
                helpDiv.createEl('h3', { text: line.substring(3) });
                currentList = null;
            } else if (line.startsWith('### ')) {
                helpDiv.createEl('h4', { text: line.substring(4) });
                currentList = null;
            } else if (line.startsWith('- ')) {
                if (!currentList) {
                    currentList = helpDiv.createEl('ul');
                }
                currentList.createEl('li', { text: line.substring(2) });
            } else if (line.trim() === '') {
                currentList = null;
            } else if (line.trim()) {
                helpDiv.createEl('p', { text: line });
                currentList = null;
            }
        });
    }
    
    // Load recent test results
    private loadRecentTestResults() {
        const resultsContainer = this.contentContainer.createDiv({ cls: 'unified-test-suite-recent-results' });
        resultsContainer.createEl('h3', { text: 'Recent Test Results' });
        
        if (this.testState.results.length === 0) {
            resultsContainer.createEl('p', { text: 'No test results yet. Run some tests to see results here.' });
            return;
        }
        
        // Show last 5 test results
        const recentResults = this.testState.results.slice(-5).reverse();
        const resultsList = resultsContainer.createEl('div', { cls: 'unified-test-suite-results-list' });
        
        recentResults.forEach(result => {
            const resultItem = resultsList.createDiv({ cls: `unified-test-suite-result-item unified-test-suite-result-${result.status}` });
            
            const header = resultItem.createDiv({ cls: 'unified-test-suite-result-header' });
            header.createEl('span', { text: result.testName, cls: 'unified-test-suite-result-name' });
            header.createEl('span', { text: result.status.toUpperCase(), cls: 'unified-test-suite-result-status' });
            
            if (result.duration) {
                resultItem.createEl('div', { 
                    text: `Duration: ${result.duration}ms`,
                    cls: 'unified-test-suite-result-duration'
                });
            }
            
            if (result.details) {
                resultItem.createEl('div', { 
                    text: result.details,
                    cls: 'unified-test-suite-result-details'
                });
            }
        });
    }
    
    // Helper methods for UI components
    private createStatWidget(container: HTMLElement, label: string, value: string) {
        const widget = container.createDiv({ cls: 'unified-test-suite-stat-widget' });
        widget.createDiv({ text: label, cls: 'unified-test-suite-stat-label' });
        widget.createDiv({ text: value, cls: 'unified-test-suite-stat-value' });
    }
    
    private createActionButton(container: HTMLElement, label: string, icon: string, callback: () => void) {
        const button = container.createEl('button', { 
            text: label, 
            cls: 'unified-test-suite-action-button mod-cta' 
        });
        button.onclick = callback;
    }
    
    private createTestButton(container: HTMLElement, label: string, callback: () => void) {
        const button = container.createEl('button', { 
            text: label, 
            cls: 'unified-test-suite-test-button' 
        });
        button.onclick = callback;
    }
    
    private createUtilityButton(container: HTMLElement, label: string, icon: string, callback: () => void) {
        const button = container.createEl('button', { 
            text: label, 
            cls: 'unified-test-suite-utility-button' 
        });
        button.onclick = callback;
    }
    
    // Test execution methods
    private async runTestSuite(category: string) {
        if (this.testState.isRunning) {
            new Notice('A test is already running. Please wait for it to complete.');
            return;
        }
        
        this.testState.isRunning = true;
        new Notice(`Starting ${category} test suite...`);
        
        try {
            // This would run all tests in the category
            // For now, just simulate with a delay
            await new Promise(resolve => setTimeout(resolve, 2000));
            
            const result: TestResult = {
                testName: `${category} Test Suite`,
                status: 'success',
                duration: 2000,
                details: `All ${category} tests completed successfully`,
                timestamp: new Date()
            };
            
            this.testState.results.push(result);
            new Notice(`${category} test suite completed successfully!`);
            
        } catch (error) {
            const result: TestResult = {
                testName: `${category} Test Suite`,
                status: 'failure',
                details: (error as Error).message,
                timestamp: new Date()
            };
            
            this.testState.results.push(result);
            new Notice(`${category} test suite failed: ${(error as Error).message}`);
            
        } finally {
            this.testState.isRunning = false;
            
            // Refresh dashboard if currently selected
            if (this.selectedTab === 'dashboard') {
                this.loadDashboardContent();
            }
        }
    }
    
    private async runIndividualTest(testId: string) {
        // Individual test implementation would go here
        new Notice(`Running ${this.getTestTitle(testId)}...`);
    }
    
    private async runScrapingPerformanceTest(size: number, targetFolder: string) {
        if (this.testState.isRunning) {
            new Notice('A test is already running. Please wait for it to complete.');
            return;
        }
        
        if (!targetFolder || targetFolder.trim() === '') {
            new Notice('Please select a target folder for performance testing.');
            return;
        }
        
        this.testState.isRunning = true;
        this.testState.currentTest = `Scraping Performance Test (${size} entries)`;
        
        const resultsArea = document.getElementById('scraping-performance-results');
        if (resultsArea) {
            resultsArea.innerHTML = '<p class="unified-test-suite-running-text">🔄 Running performance test...</p>';
        }
        
        console.log(`[OneiroMetrics Performance Test] Starting scraping test with ${size} entries from ${targetFolder}`);
        
        try {
            const startTime = performance.now();
            const testStartMemory = (performance as any).memory ? (performance as any).memory.usedJSHeapSize : 0;
            
            // Import UniversalMetricsCalculator
            const { UniversalMetricsCalculator } = await import('../../workers/UniversalMetricsCalculator');
            
            // Create metrics calculator with performance testing configuration
            const plugin = this.plugin as any;
            const originalSettings = { ...plugin.settings };
            
            // Temporarily modify settings for this test
            const testSettings = {
                ...originalSettings,
                selectionMode: 'folder',
                selectedFolder: targetFolder,
                performanceTesting: {
                    enabled: true,
                    maxFiles: size > 0 ? size : 0, // 0 = unlimited
                    showWarnings: true
                }
            };
            
            plugin.settings = testSettings;
            
            // Create calculator instance
            const calculator = new UniversalMetricsCalculator(
                this.app,
                plugin,
                undefined, // Use default worker pool config
                this.logger
            );
            
            console.log(`[OneiroMetrics Performance Test] Calculator created, starting scrape...`);
            
            // Run the actual scraping operation
            await calculator.scrapeMetrics();
            
            const endTime = performance.now();
            const testEndMemory = (performance as any).memory ? (performance as any).memory.usedJSHeapSize : 0;
            const totalTime = endTime - startTime;
            
            // Get statistics from the calculator
            const stats = calculator.getStatistics();
            
            // Restore original settings
            plugin.settings = originalSettings;
            
            // Calculate performance metrics
            const performanceMetrics = {
                totalTime,
                throughput: stats.totalCalculations > 0 ? (stats.totalCalculations / (totalTime / 1000)).toFixed(2) : '0',
                cacheHitRate: ((stats.cacheHits / (stats.cacheHits + stats.cacheMisses)) * 100).toFixed(1),
                averageProcessingTime: stats.averageProcessingTime.toFixed(2),
                workerPoolUsage: stats.workerPoolUsage,
                fallbackUsage: stats.fallbackUsage,
                memoryDelta: testEndMemory - testStartMemory
            };
            
            console.log(`[OneiroMetrics Performance Test] Completed in ${totalTime.toFixed(0)}ms`, performanceMetrics);
            
            // Update test results
            const result = {
                testName: `Scraping Performance Test (${size} entries)`,
                status: 'success' as const,
                duration: totalTime,
                details: `Processed folder "${targetFolder}" in ${totalTime.toFixed(0)}ms. Throughput: ${performanceMetrics.throughput} calculations/sec. Cache hit rate: ${performanceMetrics.cacheHitRate}%.`,
                timestamp: new Date()
            };
            
            this.testState.results.push(result);
            
            // Display detailed results
            if (resultsArea) {
                resultsArea.innerHTML = `
                    <div class="unified-test-suite-performance-results">
                        <h4>✅ Performance Test Complete</h4>
                        <div class="performance-metrics">
                            <div class="metric-row">
                                <span class="metric-label">Total Time:</span>
                                <span class="metric-value">${totalTime.toFixed(0)}ms</span>
                            </div>
                            <div class="metric-row">
                                <span class="metric-label">Throughput:</span>
                                <span class="metric-value">${performanceMetrics.throughput} calc/sec</span>
                            </div>
                            <div class="metric-row">
                                <span class="metric-label">Cache Hit Rate:</span>
                                <span class="metric-value">${performanceMetrics.cacheHitRate}%</span>
                            </div>
                            <div class="metric-row">
                                <span class="metric-label">Average Processing:</span>
                                <span class="metric-value">${performanceMetrics.averageProcessingTime}ms per entry</span>
                            </div>
                            <div class="metric-row">
                                <span class="metric-label">Worker Pool Usage:</span>
                                <span class="metric-value">${performanceMetrics.workerPoolUsage} tasks</span>
                            </div>
                            <div class="metric-row">
                                <span class="metric-label">Fallback Usage:</span>
                                <span class="metric-value">${performanceMetrics.fallbackUsage} tasks</span>
                            </div>
                            ${testStartMemory > 0 ? `
                            <div class="metric-row">
                                <span class="metric-label">Memory Delta:</span>
                                <span class="metric-value">${(performanceMetrics.memoryDelta / 1024 / 1024).toFixed(2)} MB</span>
                            </div>
                            ` : ''}
                        </div>
                        <div class="performance-summary">
                            <p><strong>Target Folder:</strong> ${targetFolder}</p>
                            <p><strong>Total Calculations:</strong> ${stats.totalCalculations}</p>
                            <p><strong>Cache Performance:</strong> ${stats.cacheHits} hits, ${stats.cacheMisses} misses</p>
                        </div>
                    </div>
                `;
            }
            
            new Notice(`✅ Performance test completed in ${totalTime.toFixed(0)}ms. Check results in Test Suite.`);
            
        } catch (error) {
            console.error(`[OneiroMetrics Performance Test] Failed:`, error);
            
            // Restore original settings on error
            const plugin = this.plugin as any;
            plugin.settings = plugin.settings.originalSettings || plugin.settings;
            
            const result = {
                testName: `Scraping Performance Test (${size} entries)`,
                status: 'failure' as const,
                details: `Performance test failed: ${(error as Error).message}`,
                timestamp: new Date()
            };
            
            this.testState.results.push(result);
            
            if (resultsArea) {
                resultsArea.innerHTML = `
                    <div class="unified-test-suite-error-results">
                        <h4>❌ Performance Test Failed</h4>
                        <p><strong>Error:</strong> ${(error as Error).message}</p>
                        <p><strong>Target Folder:</strong> ${targetFolder}</p>
                        <p>Check the console for more details.</p>
                    </div>
                `;
            }
            
            new Notice(`❌ Performance test failed: ${(error as Error).message}`);
            this.logger?.error('PerformanceTest', 'Scraping performance test failed', error as Error);
            
        } finally {
            this.testState.isRunning = false;
            this.testState.currentTest = null;
            
            // Refresh dashboard if currently selected
            if (this.selectedTab === 'dashboard') {
                this.loadDashboardContent();
            }
        }
    }
    
    // Memory analysis test
    private loadMemoryAnalysisTest() {
        this.contentContainer.createEl('p', {
            text: 'Analyze memory usage patterns and detect potential memory leaks.',
            cls: 'unified-test-suite-content-description'
        });
        
        // Memory test options
        const memoryTestsContainer = this.contentContainer.createDiv({ cls: 'unified-test-suite-memory-tests' });
        memoryTestsContainer.createEl('h3', { text: 'Memory Analysis Tests' });
        
        this.createTestButton(memoryTestsContainer, 'Memory Usage Baseline', () => {
            this.runMemoryTest('baseline');
        });
        
        this.createTestButton(memoryTestsContainer, 'Memory Leak Detection', () => {
            this.runMemoryTest('leak-detection');
        });
        
        this.createTestButton(memoryTestsContainer, 'Garbage Collection Analysis', () => {
            this.runMemoryTest('gc-analysis');
        });
    }
    
    // Scaling test
    private loadScalingTest() {
        this.contentContainer.createEl('p', {
            text: 'Test performance scaling across different data sizes and complexity levels.',
            cls: 'unified-test-suite-content-description'
        });
        
        // Scaling test configurations
        const scalingContainer = this.contentContainer.createDiv({ cls: 'unified-test-suite-scaling-tests' });
        scalingContainer.createEl('h3', { text: 'Scaling Test Configurations' });
        
        this.createTestButton(scalingContainer, 'Linear Scaling Test', () => {
            this.runScalingTest('linear');
        });
        
        this.createTestButton(scalingContainer, 'Exponential Scaling Test', () => {
            this.runScalingTest('exponential');
        });
        
        this.createTestButton(scalingContainer, 'Complex Data Scaling Test', () => {
            this.runScalingTest('complex');
        });
    }
    
    // Logging content (moved from utilities)
    private loadLoggingContent() {
        this.contentContainer.createEl('p', {
            text: 'Manage logging infrastructure, view logs, and export log data.',
            cls: 'unified-test-suite-content-description'
        });
        
        // Logging settings section
        const settingsContainer = this.contentContainer.createDiv({ cls: 'unified-test-suite-logging-settings' });
        settingsContainer.createEl('h3', { text: 'Logging Settings' });
        
        // Log level setting
        const logLevelContainer = settingsContainer.createDiv({ cls: 'unified-test-suite-setting-item' });
        logLevelContainer.createEl('label', { 
            text: 'Log Level:',
            cls: 'unified-test-suite-setting-label'
        });
        
        const logLevelSelect = logLevelContainer.createEl('select', { 
            cls: 'unified-test-suite-log-level-select' 
        });
        
        // Add log level options (excluding 'off')
        const logLevels = [
            { value: 'errors', label: 'Error' },
            { value: 'warn', label: 'Warning' },
            { value: 'info', label: 'Info' },
            { value: 'debug', label: 'Debug' },
            { value: 'trace', label: 'Trace' }
        ];
        
        logLevels.forEach(level => {
            const option = logLevelSelect.createEl('option', { 
                text: level.label,
                value: level.value
            });
        });
        
        // Set current log level
        const currentLogLevel = (this.plugin as any).settings?.logging?.level || 'info';
        logLevelSelect.value = currentLogLevel;
        
        // Debug logging to track log level reading
        console.log(`[OneiroMetrics Debug] Test Suite reading log level: ${currentLogLevel}`);
        console.log(`[OneiroMetrics Debug] Full logging settings:`, (this.plugin as any).settings?.logging);
        
        // Add change handler
        logLevelSelect.addEventListener('change', () => {
            this.updateLogLevel(logLevelSelect.value as any);
        });
        
        // Helper text
        const helperText = settingsContainer.createDiv({ cls: 'unified-test-suite-setting-helper' });
        helperText.createEl('p', {
            text: 'Note: To turn logging off completely, go to Settings → OneiroMetrics → Logging → Level and select "Off".',
            cls: 'unified-test-suite-helper-text'
        });
        
        // Logging test controls
        const testingContainer = this.contentContainer.createDiv({ cls: 'unified-test-suite-logging-testing' });
        testingContainer.createEl('h3', { text: 'Logging System Tests' });
        
        this.createTestButton(testingContainer, 'Test Log Levels', () => {
            this.testLogLevels();
        });
        
        this.createTestButton(testingContainer, 'Test Memory Adapter', () => {
            this.testMemoryAdapter();
        });
        
        this.createTestButton(testingContainer, 'Test Log Persistence', () => {
            this.testLogPersistence();
        });
        
        // Log management utilities
        const managementContainer = this.contentContainer.createDiv({ cls: 'unified-test-suite-log-management' });
        managementContainer.createEl('h3', { text: 'Log Management' });
        
        this.createUtilityButton(managementContainer, 'Open Log Viewer', 'file-text', () => {
            this.openLogViewer();
        });
        
        this.createUtilityButton(managementContainer, 'Export Logs to File', 'download', () => {
            this.exportLogsToFile();
        });
        
        this.createUtilityButton(managementContainer, 'Copy Recent Logs to Clipboard', 'copy', () => {
            this.copyRecentLogsToClipboard();
        });
        
        this.createUtilityButton(managementContainer, 'Clear Logs', 'trash', () => {
            this.clearLogs();
        });
        
        // Log statistics
        const statsContainer = this.contentContainer.createDiv({ cls: 'unified-test-suite-log-stats' });
        statsContainer.createEl('h3', { text: 'Log Statistics' });
        
        this.loadLogStatistics(statsContainer);
    }
    
    // Utilities content (updated to remove logging section)
    private loadUtilitiesContent() {
        this.contentContainer.empty();
        
        this.contentContainer.createEl('h2', { 
            text: 'Test Utilities & Tools', 
            cls: 'unified-test-suite-content-header' 
        });
        
        this.contentContainer.createEl('p', {
            text: 'Utility tools for test data generation, cleanup, and analysis.',
            cls: 'unified-test-suite-content-description'
        });
        
        // Utility sections
        const utilitiesContainer = this.contentContainer.createDiv({ cls: 'unified-test-suite-utilities-container' });
        
        // Data generation utilities
        const dataGenSection = utilitiesContainer.createDiv({ cls: 'unified-test-suite-utility-section' });
        dataGenSection.createEl('h3', { text: 'Data Generation' });
        
        // Add description of test data generation
        dataGenSection.createEl('p', {
            text: 'Generate realistic dream journal entries for testing OneiroMetrics functionality. Creates notes with varied content, realistic metrics, and proper callout structure.',
            cls: 'unified-test-suite-utility-description'
        });
        
        // Test data folder configuration
        const folderConfigContainer = dataGenSection.createDiv({ cls: 'unified-test-suite-folder-config' });
        folderConfigContainer.createEl('label', { 
            text: 'Test Data Folder:',
            cls: 'unified-test-suite-setting-label'
        });
        
        const folderInput = folderConfigContainer.createEl('input', { 
            type: 'text',
            placeholder: 'Test Data/Dreams',
            cls: 'unified-test-suite-folder-input'
        });
        
        // Get current test data folder or use default
        const currentTestFolder = (this.plugin as any).settings?.testDataFolder || 'Test Data/Dreams';
        folderInput.value = currentTestFolder;
        
        folderInput.addEventListener('change', async () => {
            const plugin = this.plugin as any;
            if (plugin.settings) {
                plugin.settings.testDataFolder = folderInput.value;
                await plugin.saveSettings();
                new Notice(`Test data folder updated: ${folderInput.value}`);
            }
        });
        
        folderConfigContainer.createEl('p', {
            text: 'Notes will be created in this folder. Folder will be created automatically if it doesn\'t exist.',
            cls: 'unified-test-suite-helper-text'
        });
        
        // Template selection dropdown
        const templateConfigContainer = dataGenSection.createDiv({ cls: 'unified-test-suite-template-config' });
        templateConfigContainer.createEl('label', { 
            text: 'Template (optional):',
            cls: 'unified-test-suite-setting-label'
        });
        
        const templateSelect = templateConfigContainer.createEl('select', { 
            cls: 'unified-test-suite-template-select'
        });
        
        // Add default option
        templateSelect.createEl('option', {
            value: '',
            text: 'Use default format (no template)'
        });
        
        // Get existing OneiroMetrics templates from Hub
        const existingTemplates = (this.plugin as any).settings?.linting?.templates || [];
        
        if (existingTemplates.length > 0) {
            // Add separator
            templateSelect.createEl('option', {
                value: '',
                text: '──────────────',
                attr: { disabled: 'true' }
            });
            
            // Add each template
            existingTemplates.forEach((template: any) => {
                templateSelect.createEl('option', {
                    value: template.id,
                    text: template.name
                });
            });
        }
        
        // Get current template or use default
        const currentTemplate = (this.plugin as any).settings?.testDataTemplate || '';
        templateSelect.value = currentTemplate;
        
        templateSelect.addEventListener('change', async () => {
            const plugin = this.plugin as any;
            if (plugin.settings) {
                plugin.settings.testDataTemplate = templateSelect.value;
                await plugin.saveSettings();
                
                const selectedText = templateSelect.options[templateSelect.selectedIndex].text;
                new Notice(`Template updated: ${selectedText}`);
            }
        });
        
        templateConfigContainer.createEl('p', {
            text: existingTemplates.length > 0 
                ? 'Select a template created in Hub → Journal Structure, or use default format. Available placeholders: {{date}} (2025-01-15), {{date-long}} (January 15, 2025), {{date-month-day}} (January 15), {{date-compact}} / {{date-ref}} (20250115), {{title}}, {{content}}, {{metrics}}, or individual metric names.'
                : 'No OneiroMetrics templates found. Create templates in Hub → Journal Structure to use them here. Use placeholders like {{date}}, {{date-long}}, {{date-month-day}}, {{date-compact}}, {{title}}, {{content}} in your templates.',
            cls: 'unified-test-suite-helper-text'
        });
        
        // Generation buttons with presets
        const generationButtons = dataGenSection.createDiv({ cls: 'unified-test-suite-generation-buttons' });
        
        this.createUtilityButton(generationButtons, 'Small Dataset (500 entries)', 'database', () => {
            this.generateTestData('small');
        });
        
        this.createUtilityButton(generationButtons, 'Medium Dataset (1,000 entries)', 'database', () => {
            this.generateTestData('medium');
        });
        
        this.createUtilityButton(generationButtons, 'Large Dataset (5,000 entries)', 'database', () => {
            this.generateTestData('large');
        });
        
        this.createUtilityButton(generationButtons, 'Custom Dataset', 'settings', () => {
            this.showCustomDatasetDialog();
        });
        
        this.createUtilityButton(generationButtons, 'Count Test Files', 'hash', () => {
            this.countTestFiles();
        });
        
        this.createUtilityButton(dataGenSection, 'Export Test Results', 'download', () => {
            this.exportTestResults();
        });
        
        // Performance Testing utilities
        const performanceSection = utilitiesContainer.createDiv({ cls: 'unified-test-suite-utility-section' });
        performanceSection.createEl('h3', { text: 'Performance Testing Mode' });
        
        performanceSection.createEl('p', {
            text: 'Performance testing mode removes or increases the normal 200-file limit for scraping operations. Enable this for testing with large datasets.',
            cls: 'unified-test-suite-utility-description'
        });
        
        // Performance mode toggle
        const perfModeContainer = performanceSection.createDiv({ cls: 'unified-test-suite-perf-mode-config' });
        perfModeContainer.createEl('label', { 
            text: 'Performance Testing Mode:',
            cls: 'unified-test-suite-setting-label'
        });
        
        const perfModeCheckbox = perfModeContainer.createEl('input', { 
            type: 'checkbox',
            cls: 'unified-test-suite-perf-mode-checkbox'
        });
        
        // Get current performance testing settings
        const plugin = this.plugin as any;
        const currentPerfSettings = plugin.settings?.performanceTesting || { enabled: false, maxFiles: 0, showWarnings: true };
        perfModeCheckbox.checked = currentPerfSettings.enabled;
        
        // Max files setting
        const maxFilesContainer = performanceSection.createDiv({ cls: 'unified-test-suite-max-files-config' });
        maxFilesContainer.createEl('label', { 
            text: 'Max Files (0 = unlimited):',
            cls: 'unified-test-suite-setting-label'
        });
        
        const maxFilesInput = maxFilesContainer.createEl('input', { 
            type: 'number',
            cls: 'unified-test-suite-max-files-input',
            placeholder: '0'
        });
        maxFilesInput.setAttribute('min', '0');
        maxFilesInput.setAttribute('max', '50000');
        maxFilesInput.value = currentPerfSettings.maxFiles.toString();
        
        // Show warnings toggle
        const warningsContainer = performanceSection.createDiv({ cls: 'unified-test-suite-warnings-config' });
        warningsContainer.createEl('label', { 
            text: 'Show Performance Warnings:',
            cls: 'unified-test-suite-setting-label'
        });
        
        const warningsCheckbox = warningsContainer.createEl('input', { 
            type: 'checkbox',
            cls: 'unified-test-suite-warnings-checkbox'
        });
        warningsCheckbox.checked = currentPerfSettings.showWarnings;
        
        // Update handler for performance mode
        const updatePerformanceSettings = async () => {
            const plugin = this.plugin as any;
            if (plugin.settings) {
                if (!plugin.settings.performanceTesting) {
                    plugin.settings.performanceTesting = {};
                }
                
                plugin.settings.performanceTesting.enabled = perfModeCheckbox.checked;
                plugin.settings.performanceTesting.maxFiles = parseInt(maxFilesInput.value) || 0;
                plugin.settings.performanceTesting.showWarnings = warningsCheckbox.checked;
                
                await plugin.saveSettings();
                
                // Show status message
                const status = perfModeCheckbox.checked ? 'enabled' : 'disabled';
                const limitText = perfModeCheckbox.checked 
                    ? (plugin.settings.performanceTesting.maxFiles > 0 
                        ? `(limit: ${plugin.settings.performanceTesting.maxFiles} files)` 
                        : '(unlimited files)')
                    : '(200 file limit)';
                    
                new Notice(`Performance testing mode ${status} ${limitText}`);
            }
        };
        
        perfModeCheckbox.addEventListener('change', updatePerformanceSettings);
        maxFilesInput.addEventListener('change', updatePerformanceSettings);
        warningsCheckbox.addEventListener('change', updatePerformanceSettings);
        
        // Status display
        const statusContainer = performanceSection.createDiv({ cls: 'unified-test-suite-perf-status' });
        const updateStatusDisplay = () => {
            statusContainer.empty();
            
            const isEnabled = perfModeCheckbox.checked;
            const maxFiles = parseInt(maxFilesInput.value) || 0;
            
            if (isEnabled) {
                const limitText = maxFiles > 0 ? `${maxFiles} files` : 'unlimited files';
                statusContainer.createEl('p', {
                    text: `⚠️ Performance mode active - processing ${limitText}`,
                    cls: 'unified-test-suite-perf-warning'
                });
            } else {
                statusContainer.createEl('p', {
                    text: '✅ Normal mode - processing limited to 200 files',
                    cls: 'unified-test-suite-perf-normal'
                });
            }
        };
        
        // Initial status update
        updateStatusDisplay();
        
        // Update status when settings change
        perfModeCheckbox.addEventListener('change', updateStatusDisplay);
        maxFilesInput.addEventListener('input', updateStatusDisplay);
        
        // Cleanup utilities
        const cleanupSection = utilitiesContainer.createDiv({ cls: 'unified-test-suite-utility-section' });
        cleanupSection.createEl('h3', { text: 'Cleanup & Maintenance' });
        
        this.createUtilityButton(cleanupSection, 'Clear All Caches', 'trash', () => {
            this.clearAllCaches();
        });
        
        this.createUtilityButton(cleanupSection, 'Reset Test Environment', 'refresh-cw', () => {
            this.resetTestEnvironment();
        });
        
        this.createUtilityButton(cleanupSection, 'Clear Test Data Folder', 'trash-2', () => {
            this.clearTestDataFolder();
        });
    }
    
    // Help content
    private loadHelpContent() {
        this.contentContainer.empty();
        
        this.contentContainer.createEl('h2', { 
            text: 'Test Suite Documentation', 
            cls: 'unified-test-suite-content-header' 
        });
        
        const helpContent = `
## Getting Started

The Unified Test Suite consolidates all OneiroMetrics testing functionality into a single interface.

### Test Categories

- **Performance Testing**: Measure scraping speed, memory usage, and scaling behavior
- **Component Testing**: Validate individual plugin components and features  
- **Validation & Structure**: Ensure data integrity and journal structure compliance
- **System Diagnostics**: Test underlying systems like web workers and logging

### Running Tests

1. **Individual Tests**: Navigate to specific test tabs and click "Run Test"
2. **Test Suites**: Use the Dashboard to run entire categories of tests
3. **Custom Configuration**: Many tests allow custom parameters and options

### Best Practices

- Run performance tests in a clean environment for accurate results
- Use small datasets for initial testing, scale up as needed
- Monitor memory usage during long-running tests
- Clear caches between test runs for consistent results

### Interpreting Results

- **Success**: Test completed without errors
- **Warning**: Test completed with minor issues or performance concerns
- **Failure**: Test failed due to errors or unmet requirements
- **Running**: Test is currently in progress
        `;
        
        const helpDiv = this.contentContainer.createDiv({ cls: 'unified-test-suite-help-content' });
        
        // Simple markdown-like rendering
        const lines = helpContent.trim().split('\n');
        let currentList: HTMLElement | null = null;
        
        lines.forEach(line => {
            if (line.startsWith('## ')) {
                helpDiv.createEl('h3', { text: line.substring(3) });
                currentList = null;
            } else if (line.startsWith('### ')) {
                helpDiv.createEl('h4', { text: line.substring(4) });
                currentList = null;
            } else if (line.startsWith('- ')) {
                if (!currentList) {
                    currentList = helpDiv.createEl('ul');
                }
                currentList.createEl('li', { text: line.substring(2) });
            } else if (line.trim() === '') {
                currentList = null;
            } else if (line.trim()) {
                helpDiv.createEl('p', { text: line });
                currentList = null;
            }
        });
    }
    
    // Load recent test results
    private loadRecentTestResults() {
        const resultsContainer = this.contentContainer.createDiv({ cls: 'unified-test-suite-recent-results' });
        resultsContainer.createEl('h3', { text: 'Recent Test Results' });
        
        if (this.testState.results.length === 0) {
            resultsContainer.createEl('p', { text: 'No test results yet. Run some tests to see results here.' });
            return;
        }
        
        // Show last 5 test results
        const recentResults = this.testState.results.slice(-5).reverse();
        const resultsList = resultsContainer.createEl('div', { cls: 'unified-test-suite-results-list' });
        
        recentResults.forEach(result => {
            const resultItem = resultsList.createDiv({ cls: `unified-test-suite-result-item unified-test-suite-result-${result.status}` });
            
            const header = resultItem.createDiv({ cls: 'unified-test-suite-result-header' });
            header.createEl('span', { text: result.testName, cls: 'unified-test-suite-result-name' });
            header.createEl('span', { text: result.status.toUpperCase(), cls: 'unified-test-suite-result-status' });
            
            if (result.duration) {
                resultItem.createEl('div', { 
                    text: `Duration: ${result.duration}ms`,
                    cls: 'unified-test-suite-result-duration'
                });
            }
            
            if (result.details) {
                resultItem.createEl('div', { 
                    text: result.details,
                    cls: 'unified-test-suite-result-details'
                });
            }
        });
    }
    
    // Helper methods for UI components
    private createStatWidget(container: HTMLElement, label: string, value: string) {
        const widget = container.createDiv({ cls: 'unified-test-suite-stat-widget' });
        widget.createDiv({ text: label, cls: 'unified-test-suite-stat-label' });
        widget.createDiv({ text: value, cls: 'unified-test-suite-stat-value' });
    }
    
    private createActionButton(container: HTMLElement, label: string, icon: string, callback: () => void) {
        const button = container.createEl('button', { 
            text: label, 
            cls: 'unified-test-suite-action-button mod-cta' 
        });
        button.onclick = callback;
    }
    
    private createTestButton(container: HTMLElement, label: string, callback: () => void) {
        const button = container.createEl('button', { 
            text: label, 
            cls: 'unified-test-suite-test-button' 
        });
        button.onclick = callback;
    }
    
    private createUtilityButton(container: HTMLElement, label: string, icon: string, callback: () => void) {
        const button = container.createEl('button', { 
            text: label, 
            cls: 'unified-test-suite-utility-button' 
        });
        button.onclick = callback;
    }
    
    // Test execution methods
    private async runTestSuite(category: string) {
        if (this.testState.isRunning) {
            new Notice('A test is already running. Please wait for it to complete.');
            return;
        }
        
        this.testState.isRunning = true;
        new Notice(`Starting ${category} test suite...`);
        
        try {
            // This would run all tests in the category
            // For now, just simulate with a delay
            await new Promise(resolve => setTimeout(resolve, 2000));
            
            const result: TestResult = {
                testName: `${category} Test Suite`,
                status: 'success',
                duration: 2000,
                details: `All ${category} tests completed successfully`,
                timestamp: new Date()
            };
            
            this.testState.results.push(result);
            new Notice(`${category} test suite completed successfully!`);
            
        } catch (error) {
            const result: TestResult = {
                testName: `${category} Test Suite`,
                status: 'failure',
                details: (error as Error).message,
                timestamp: new Date()
            };
            
            this.testState.results.push(result);
            new Notice(`${category} test suite failed: ${(error as Error).message}`);
            
        } finally {
            this.testState.isRunning = false;
            
            // Refresh dashboard if currently selected
            if (this.selectedTab === 'dashboard') {
                this.loadDashboardContent();
            }
        }
    }
    
    private async runIndividualTest(testId: string) {
        // Individual test implementation would go here
        new Notice(`Running ${this.getTestTitle(testId)}...`);
    }
    
    private async runScrapingPerformanceTest(size: number, targetFolder: string) {
        if (this.testState.isRunning) {
            new Notice('A test is already running. Please wait for it to complete.');
            return;
        }
        
        if (!targetFolder || targetFolder.trim() === '') {
            new Notice('Please select a target folder for performance testing.');
            return;
        }
        
        this.testState.isRunning = true;
        this.testState.currentTest = `Scraping Performance Test (${size} entries)`;
        
        const resultsArea = document.getElementById('scraping-performance-results');
        if (resultsArea) {
            resultsArea.innerHTML = '<p class="unified-test-suite-running-text">🔄 Running performance test...</p>';
        }
        
        console.log(`[OneiroMetrics Performance Test] Starting scraping test with ${size} entries from ${targetFolder}`);
        
        try {
            const startTime = performance.now();
            const testStartMemory = (performance as any).memory ? (performance as any).memory.usedJSHeapSize : 0;
            
            // Import UniversalMetricsCalculator
            const { UniversalMetricsCalculator } = await import('../../workers/UniversalMetricsCalculator');
            
            // Create metrics calculator with performance testing configuration
            const plugin = this.plugin as any;
            const originalSettings = { ...plugin.settings };
            
            // Temporarily modify settings for this test
            const testSettings = {
                ...originalSettings,
                selectionMode: 'folder',
                selectedFolder: targetFolder,
                performanceTesting: {
                    enabled: true,
                    maxFiles: size > 0 ? size : 0, // 0 = unlimited
                    showWarnings: true
                }
            };
            
            plugin.settings = testSettings;
            
            // Create calculator instance
            const calculator = new UniversalMetricsCalculator(
                this.app,
                plugin,
                undefined, // Use default worker pool config
                this.logger
            );
            
            console.log(`[OneiroMetrics Performance Test] Calculator created, starting scrape...`);
            
            // Run the actual scraping operation
            await calculator.scrapeMetrics();
            
            const endTime = performance.now();
            const testEndMemory = (performance as any).memory ? (performance as any).memory.usedJSHeapSize : 0;
            const totalTime = endTime - startTime;
            
            // Get statistics from the calculator
            const stats = calculator.getStatistics();
            
            // Restore original settings
            plugin.settings = originalSettings;
            
            // Calculate performance metrics
            const performanceMetrics = {
                totalTime,
                throughput: stats.totalCalculations > 0 ? (stats.totalCalculations / (totalTime / 1000)).toFixed(2) : '0',
                cacheHitRate: ((stats.cacheHits / (stats.cacheHits + stats.cacheMisses)) * 100).toFixed(1),
                averageProcessingTime: stats.averageProcessingTime.toFixed(2),
                workerPoolUsage: stats.workerPoolUsage,
                fallbackUsage: stats.fallbackUsage,
                memoryDelta: testEndMemory - testStartMemory
            };
            
            console.log(`[OneiroMetrics Performance Test] Completed in ${totalTime.toFixed(0)}ms`, performanceMetrics);
            
            // Update test results
            const result = {
                testName: `Scraping Performance Test (${size} entries)`,
                status: 'success' as const,
                duration: totalTime,
                details: `Processed folder "${targetFolder}" in ${totalTime.toFixed(0)}ms. Throughput: ${performanceMetrics.throughput} calculations/sec. Cache hit rate: ${performanceMetrics.cacheHitRate}%.`,
                timestamp: new Date()
            };
            
            this.testState.results.push(result);
            
            // Display detailed results
            if (resultsArea) {
                resultsArea.innerHTML = `
                    <div class="unified-test-suite-performance-results">
                        <h4>✅ Performance Test Complete</h4>
                        <div class="performance-metrics">
                            <div class="metric-row">
                                <span class="metric-label">Total Time:</span>
                                <span class="metric-value">${totalTime.toFixed(0)}ms</span>
                            </div>
                            <div class="metric-row">
                                <span class="metric-label">Throughput:</span>
                                <span class="metric-value">${performanceMetrics.throughput} calc/sec</span>
                            </div>
                            <div class="metric-row">
                                <span class="metric-label">Cache Hit Rate:</span>
                                <span class="metric-value">${performanceMetrics.cacheHitRate}%</span>
                            </div>
                            <div class="metric-row">
                                <span class="metric-label">Average Processing:</span>
                                <span class="metric-value">${performanceMetrics.averageProcessingTime}ms per entry</span>
                            </div>
                            <div class="metric-row">
                                <span class="metric-label">Worker Pool Usage:</span>
                                <span class="metric-value">${performanceMetrics.workerPoolUsage} tasks</span>
                            </div>
                            <div class="metric-row">
                                <span class="metric-label">Fallback Usage:</span>
                                <span class="metric-value">${performanceMetrics.fallbackUsage} tasks</span>
                            </div>
                            ${testStartMemory > 0 ? `
                            <div class="metric-row">
                                <span class="metric-label">Memory Delta:</span>
                                <span class="metric-value">${(performanceMetrics.memoryDelta / 1024 / 1024).toFixed(2)} MB</span>
                            </div>
                            ` : ''}
                        </div>
                        <div class="performance-summary">
                            <p><strong>Target Folder:</strong> ${targetFolder}</p>
                            <p><strong>Total Calculations:</strong> ${stats.totalCalculations}</p>
                            <p><strong>Cache Performance:</strong> ${stats.cacheHits} hits, ${stats.cacheMisses} misses</p>
                        </div>
                    </div>
                `;
            }
            
            new Notice(`✅ Performance test completed in ${totalTime.toFixed(0)}ms. Check results in Test Suite.`);
            
        } catch (error) {
            console.error(`[OneiroMetrics Performance Test] Failed:`, error);
            
            // Restore original settings on error
            const plugin = this.plugin as any;
            plugin.settings = plugin.settings.originalSettings || plugin.settings;
            
            const result = {
                testName: `Scraping Performance Test (${size} entries)`,
                status: 'failure' as const,
                details: `Performance test failed: ${(error as Error).message}`,
                timestamp: new Date()
            };
            
            this.testState.results.push(result);
            
            if (resultsArea) {
                resultsArea.innerHTML = `
                    <div class="unified-test-suite-error-results">
                        <h4>❌ Performance Test Failed</h4>
                        <p><strong>Error:</strong> ${(error as Error).message}</p>
                        <p><strong>Target Folder:</strong> ${targetFolder}</p>
                        <p>Check the console for more details.</p>
                    </div>
                `;
            }
            
            new Notice(`❌ Performance test failed: ${(error as Error).message}`);
            this.logger?.error('PerformanceTest', 'Scraping performance test failed', error as Error);
            
        } finally {
            this.testState.isRunning = false;
            this.testState.currentTest = null;
            
            // Refresh dashboard if currently selected
            if (this.selectedTab === 'dashboard') {
                this.loadDashboardContent();
            }
        }
    }
    
    // Memory analysis test
    private loadMemoryAnalysisTest() {
        this.contentContainer.createEl('p', {
            text: 'Analyze memory usage patterns and detect potential memory leaks.',
            cls: 'unified-test-suite-content-description'
        });
        
        // Memory test options
        const memoryTestsContainer = this.contentContainer.createDiv({ cls: 'unified-test-suite-memory-tests' });
        memoryTestsContainer.createEl('h3', { text: 'Memory Analysis Tests' });
        
        this.createTestButton(memoryTestsContainer, 'Memory Usage Baseline', () => {
            this.runMemoryTest('baseline');
        });
        
        this.createTestButton(memoryTestsContainer, 'Memory Leak Detection', () => {
            this.runMemoryTest('leak-detection');
        });
        
        this.createTestButton(memoryTestsContainer, 'Garbage Collection Analysis', () => {
            this.runMemoryTest('gc-analysis');
        });
    }
    
    // Scaling test
    private loadScalingTest() {
        this.contentContainer.createEl('p', {
            text: 'Test performance scaling across different data sizes and complexity levels.',
            cls: 'unified-test-suite-content-description'
        });
        
        // Scaling test configurations
        const scalingContainer = this.contentContainer.createDiv({ cls: 'unified-test-suite-scaling-tests' });
        scalingContainer.createEl('h3', { text: 'Scaling Test Configurations' });
        
        this.createTestButton(scalingContainer, 'Linear Scaling Test', () => {
            this.runScalingTest('linear');
        });
        
        this.createTestButton(scalingContainer, 'Exponential Scaling Test', () => {
            this.runScalingTest('exponential');
        });
        
        this.createTestButton(scalingContainer, 'Complex Data Scaling Test', () => {
            this.runScalingTest('complex');
        });
    }
    
    // Logging content (moved from utilities)
    private loadLoggingContent() {
        this.contentContainer.createEl('p', {
            text: 'Manage logging infrastructure, view logs, and export log data.',
            cls: 'unified-test-suite-content-description'
        });
        
        // Logging settings section
        const settingsContainer = this.contentContainer.createDiv({ cls: 'unified-test-suite-logging-settings' });
        settingsContainer.createEl('h3', { text: 'Logging Settings' });
        
        // Log level setting
        const logLevelContainer = settingsContainer.createDiv({ cls: 'unified-test-suite-setting-item' });
        logLevelContainer.createEl('label', { 
            text: 'Log Level:',
            cls: 'unified-test-suite-setting-label'
        });
        
        const logLevelSelect = logLevelContainer.createEl('select', { 
            cls: 'unified-test-suite-log-level-select' 
        });
        
        // Add log level options (excluding 'off')
        const logLevels = [
            { value: 'errors', label: 'Error' },
            { value: 'warn', label: 'Warning' },
            { value: 'info', label: 'Info' },
            { value: 'debug', label: 'Debug' },
            { value: 'trace', label: 'Trace' }
        ];
        
        logLevels.forEach(level => {
            const option = logLevelSelect.createEl('option', { 
                text: level.label,
                value: level.value
            });
        });
        
        // Set current log level
        const currentLogLevel = (this.plugin as any).settings?.logging?.level || 'info';
        logLevelSelect.value = currentLogLevel;
        
        // Debug logging to track log level reading
        console.log(`[OneiroMetrics Debug] Test Suite reading log level: ${currentLogLevel}`);
        console.log(`[OneiroMetrics Debug] Full logging settings:`, (this.plugin as any).settings?.logging);
        
        // Add change handler
        logLevelSelect.addEventListener('change', () => {
            this.updateLogLevel(logLevelSelect.value as any);
        });
        
        // Helper text
        const helperText = settingsContainer.createDiv({ cls: 'unified-test-suite-setting-helper' });
        helperText.createEl('p', {
            text: 'Note: To turn logging off completely, go to Settings → OneiroMetrics → Logging → Level and select "Off".',
            cls: 'unified-test-suite-helper-text'
        });
        
        // Logging test controls
        const testingContainer = this.contentContainer.createDiv({ cls: 'unified-test-suite-logging-testing' });
        testingContainer.createEl('h3', { text: 'Logging System Tests' });
        
        this.createTestButton(testingContainer, 'Test Log Levels', () => {
            this.testLogLevels();
        });
        
        this.createTestButton(testingContainer, 'Test Memory Adapter', () => {
            this.testMemoryAdapter();
        });
        
        this.createTestButton(testingContainer, 'Test Log Persistence', () => {
            this.testLogPersistence();
        });
        
        // Log management utilities
        const managementContainer = this.contentContainer.createDiv({ cls: 'unified-test-suite-log-management' });
        managementContainer.createEl('h3', { text: 'Log Management' });
        
        this.createUtilityButton(managementContainer, 'Open Log Viewer', 'file-text', () => {
            this.openLogViewer();
        });
        
        this.createUtilityButton(managementContainer, 'Export Logs to File', 'download', () => {
            this.exportLogsToFile();
        });
        
        this.createUtilityButton(managementContainer, 'Copy Recent Logs to Clipboard', 'copy', () => {
            this.copyRecentLogsToClipboard();
        });
        
        this.createUtilityButton(managementContainer, 'Clear Logs', 'trash', () => {
            this.clearLogs();
        });
        
        // Log statistics
        const statsContainer = this.contentContainer.createDiv({ cls: 'unified-test-suite-log-stats' });
        statsContainer.createEl('h3', { text: 'Log Statistics' });
        
        this.loadLogStatistics(statsContainer);
    }
    
    // Utilities content (updated to remove logging section)
    private loadUtilitiesContent() {
        this.contentContainer.empty();
        
        this.contentContainer.createEl('h2', { 
            text: 'Test Utilities & Tools', 
            cls: 'unified-test-suite-content-header' 
        });
        
        this.contentContainer.createEl('p', {
            text: 'Utility tools for test data generation, cleanup, and analysis.',
            cls: 'unified-test-suite-content-description'
        });
        
        // Utility sections
        const utilitiesContainer = this.contentContainer.createDiv({ cls: 'unified-test-suite-utilities-container' });
        
        // Data generation utilities
        const dataGenSection = utilitiesContainer.createDiv({ cls: 'unified-test-suite-utility-section' });
        dataGenSection.createEl('h3', { text: 'Data Generation' });
        
        // Add description of test data generation
        dataGenSection.createEl('p', {
            text: 'Generate realistic dream journal entries for testing OneiroMetrics functionality. Creates notes with varied content, realistic metrics, and proper callout structure.',
            cls: 'unified-test-suite-utility-description'
        });
        
        // Test data folder configuration
        const folderConfigContainer = dataGenSection.createDiv({ cls: 'unified-test-suite-folder-config' });
        folderConfigContainer.createEl('label', { 
            text: 'Test Data Folder:',
            cls: 'unified-test-suite-setting-label'
        });
        
        const folderInput = folderConfigContainer.createEl('input', { 
            type: 'text',
            placeholder: 'Test Data/Dreams',
            cls: 'unified-test-suite-folder-input'
        });
        
        // Get current test data folder or use default
        const currentTestFolder = (this.plugin as any).settings?.testDataFolder || 'Test Data/Dreams';
        folderInput.value = currentTestFolder;
        
        folderInput.addEventListener('change', async () => {
            const plugin = this.plugin as any;
            if (plugin.settings) {
                plugin.settings.testDataFolder = folderInput.value;
                await plugin.saveSettings();
                new Notice(`Test data folder updated: ${folderInput.value}`);
            }
        });
        
        folderConfigContainer.createEl('p', {
            text: 'Notes will be created in this folder. Folder will be created automatically if it doesn\'t exist.',
            cls: 'unified-test-suite-helper-text'
        });
        
        // Template selection dropdown
        const templateConfigContainer = dataGenSection.createDiv({ cls: 'unified-test-suite-template-config' });
        templateConfigContainer.createEl('label', { 
            text: 'Template (optional):',
            cls: 'unified-test-suite-setting-label'
        });
        
        const templateSelect = templateConfigContainer.createEl('select', { 
            cls: 'unified-test-suite-template-select'
        });
        
        // Add default option
        templateSelect.createEl('option', {
            value: '',
            text: 'Use default format (no template)'
        });
        
        // Get existing OneiroMetrics templates from Hub
        const existingTemplates = (this.plugin as any).settings?.linting?.templates || [];
        
        if (existingTemplates.length > 0) {
            // Add separator
            templateSelect.createEl('option', {
                value: '',
                text: '──────────────',
                attr: { disabled: 'true' }
            });
            
            // Add each template
            existingTemplates.forEach((template: any) => {
                templateSelect.createEl('option', {
                    value: template.id,
                    text: template.name
                });
            });
        }
        
        // Get current template or use default
        const currentTemplate = (this.plugin as any).settings?.testDataTemplate || '';
        templateSelect.value = currentTemplate;
        
        templateSelect.addEventListener('change', async () => {
            const plugin = this.plugin as any;
            if (plugin.settings) {
                plugin.settings.testDataTemplate = templateSelect.value;
                await plugin.saveSettings();
                
                const selectedText = templateSelect.options[templateSelect.selectedIndex].text;
                new Notice(`Template updated: ${selectedText}`);
            }
        });
        
        templateConfigContainer.createEl('p', {
            text: existingTemplates.length > 0 
                ? 'Select a template created in Hub → Journal Structure, or use default format. Available placeholders: {{date}} (2025-01-15), {{date-long}} (January 15, 2025), {{date-month-day}} (January 15), {{date-compact}} / {{date-ref}} (20250115), {{title}}, {{content}}, {{metrics}}, or individual metric names.'
                : 'No OneiroMetrics templates found. Create templates in Hub → Journal Structure to use them here. Use placeholders like {{date}}, {{date-long}}, {{date-month-day}}, {{date-compact}}, {{title}}, {{content}} in your templates.',
            cls: 'unified-test-suite-helper-text'
        });
        
        // Generation buttons with presets
        const generationButtons = dataGenSection.createDiv({ cls: 'unified-test-suite-generation-buttons' });
        
        this.createUtilityButton(generationButtons, 'Small Dataset (500 entries)', 'database', () => {
            this.generateTestData('small');
        });
        
        this.createUtilityButton(generationButtons, 'Medium Dataset (1,000 entries)', 'database', () => {
            this.generateTestData('medium');
        });
        
        this.createUtilityButton(generationButtons, 'Large Dataset (5,000 entries)', 'database', () => {
            this.generateTestData('large');
        });
        
        this.createUtilityButton(generationButtons, 'Custom Dataset', 'settings', () => {
            this.showCustomDatasetDialog();
        });
        
        this.createUtilityButton(generationButtons, 'Count Test Files', 'hash', () => {
            this.countTestFiles();
        });
        
        this.createUtilityButton(dataGenSection, 'Export Test Results', 'download', () => {
            this.exportTestResults();
        });
        
        // Performance Testing utilities
        const performanceSection = utilitiesContainer.createDiv({ cls: 'unified-test-suite-utility-section' });
        performanceSection.createEl('h3', { text: 'Performance Testing Mode' });
        
        performanceSection.createEl('p', {
            text: 'Performance testing mode removes or increases the normal 200-file limit for scraping operations. Enable this for testing with large datasets.',
            cls: 'unified-test-suite-utility-description'
        });
        
        // Performance mode toggle
        const perfModeContainer = performanceSection.createDiv({ cls: 'unified-test-suite-perf-mode-config' });
        perfModeContainer.createEl('label', { 
            text: 'Performance Testing Mode:',
            cls: 'unified-test-suite-setting-label'
        });
        
        const perfModeCheckbox = perfModeContainer.createEl('input', { 
            type: 'checkbox',
            cls: 'unified-test-suite-perf-mode-checkbox'
        });
        
        // Get current performance testing settings
        const plugin = this.plugin as any;
        const currentPerfSettings = plugin.settings?.performanceTesting || { enabled: false, maxFiles: 0, showWarnings: true };
        perfModeCheckbox.checked = currentPerfSettings.enabled;
        
        // Max files setting
        const maxFilesContainer = performanceSection.createDiv({ cls: 'unified-test-suite-max-files-config' });
        maxFilesContainer.createEl('label', { 
            text: 'Max Files (0 = unlimited):',
            cls: 'unified-test-suite-setting-label'
        });
        
        const maxFilesInput = maxFilesContainer.createEl('input', { 
            type: 'number',
            cls: 'unified-test-suite-max-files-input',
            placeholder: '0'
        });
        maxFilesInput.setAttribute('min', '0');
        maxFilesInput.setAttribute('max', '50000');
        maxFilesInput.value = currentPerfSettings.maxFiles.toString();
        
        // Show warnings toggle
        const warningsContainer = performanceSection.createDiv({ cls: 'unified-test-suite-warnings-config' });
        warningsContainer.createEl('label', { 
            text: 'Show Performance Warnings:',
            cls: 'unified-test-suite-setting-label'
        });
        
        const warningsCheckbox = warningsContainer.createEl('input', { 
            type: 'checkbox',
            cls: 'unified-test-suite-warnings-checkbox'
        });
        warningsCheckbox.checked = currentPerfSettings.showWarnings;
        
        // Update handler for performance mode
        const updatePerformanceSettings = async () => {
            const plugin = this.plugin as any;
            if (plugin.settings) {
                if (!plugin.settings.performanceTesting) {
                    plugin.settings.performanceTesting = {};
                }
                
                plugin.settings.performanceTesting.enabled = perfModeCheckbox.checked;
                plugin.settings.performanceTesting.maxFiles = parseInt(maxFilesInput.value) || 0;
                plugin.settings.performanceTesting.showWarnings = warningsCheckbox.checked;
                
                await plugin.saveSettings();
                
                // Show status message
                const status = perfModeCheckbox.checked ? 'enabled' : 'disabled';
                const limitText = perfModeCheckbox.checked 
                    ? (plugin.settings.performanceTesting.maxFiles > 0 
                        ? `(limit: ${plugin.settings.performanceTesting.maxFiles} files)` 
                        : '(unlimited files)')
                    : '(200 file limit)';
                    
                new Notice(`Performance testing mode ${status} ${limitText}`);
            }
        };
        
        perfModeCheckbox.addEventListener('change', updatePerformanceSettings);
        maxFilesInput.addEventListener('change', updatePerformanceSettings);
        warningsCheckbox.addEventListener('change', updatePerformanceSettings);
        
        // Status display
        const statusContainer = performanceSection.createDiv({ cls: 'unified-test-suite-perf-status' });
        const updateStatusDisplay = () => {
            statusContainer.empty();
            
            const isEnabled = perfModeCheckbox.checked;
            const maxFiles = parseInt(maxFilesInput.value) || 0;
            
            if (isEnabled) {
                const limitText = maxFiles > 0 ? `${maxFiles} files` : 'unlimited files';
                statusContainer.createEl('p', {
                    text: `⚠️ Performance mode active - processing ${limitText}`,
                    cls: 'unified-test-suite-perf-warning'
                });
            } else {
                statusContainer.createEl('p', {
                    text: '✅ Normal mode - processing limited to 200 files',
                    cls: 'unified-test-suite-perf-normal'
                });
            }
        };
        
        // Initial status update
        updateStatusDisplay();
        
        // Update status when settings change
        perfModeCheckbox.addEventListener('change', updateStatusDisplay);
        maxFilesInput.addEventListener('input', updateStatusDisplay);
        
        // Cleanup utilities
        const cleanupSection = utilitiesContainer.createDiv({ cls: 'unified-test-suite-utility-section' });
        cleanupSection.createEl('h3', { text: 'Cleanup & Maintenance' });
        
        this.createUtilityButton(cleanupSection, 'Clear All Caches', 'trash', () => {
            this.clearAllCaches();
        });
        
        this.createUtilityButton(cleanupSection, 'Reset Test Environment', 'refresh-cw', () => {
            this.resetTestEnvironment();
        });
        
        this.createUtilityButton(cleanupSection, 'Clear Test Data Folder', 'trash-2', () => {
            this.clearTestDataFolder();
        });
    }
    
    // Help content
    private loadHelpContent() {
        this.contentContainer.empty();
        
        this.contentContainer.createEl('h2', { 
            text: 'Test Suite Documentation', 
            cls: 'unified-test-suite-content-header' 
        });
        
        const helpContent = `
## Getting Started

The Unified Test Suite consolidates all OneiroMetrics testing functionality into a single interface.

### Test Categories

- **Performance Testing**: Measure scraping speed, memory usage, and scaling behavior
- **Component Testing**: Validate individual plugin components and features  
- **Validation & Structure**: Ensure data integrity and journal structure compliance
- **System Diagnostics**: Test underlying systems like web workers and logging

### Running Tests

1. **Individual Tests**: Navigate to specific test tabs and click "Run Test"
2. **Test Suites**: Use the Dashboard to run entire categories of tests
3. **Custom Configuration**: Many tests allow custom parameters and options

### Best Practices

- Run performance tests in a clean environment for accurate results
- Use small datasets for initial testing, scale up as needed
- Monitor memory usage during long-running tests
- Clear caches between test runs for consistent results

### Interpreting Results

- **Success**: Test completed without errors
- **Warning**: Test completed with minor issues or performance concerns
- **Failure**: Test failed due to errors or unmet requirements
- **Running**: Test is currently in progress
        `;
        
        const helpDiv = this.contentContainer.createDiv({ cls: 'unified-test-suite-help-content' });
        
        // Simple markdown-like rendering
        const lines = helpContent.trim().split('\n');
        let currentList: HTMLElement | null = null;
        
        lines.forEach(line => {
            if (line.startsWith('## ')) {
                helpDiv.createEl('h3', { text: line.substring(3) });
                currentList = null;
            } else if (line.startsWith('### ')) {
                helpDiv.createEl('h4', { text: line.substring(4) });
                currentList = null;
            } else if (line.startsWith('- ')) {
                if (!currentList) {
                    currentList = helpDiv.createEl('ul');
                }
                currentList.createEl('li', { text: line.substring(2) });
            } else if (line.trim() === '') {
                currentList = null;
            } else if (line.trim()) {
                helpDiv.createEl('p', { text: line });
                currentList = null;
            }
        });
    }
    
    // Load recent test results
    private loadRecentTestResults() {
        const resultsContainer = this.contentContainer.createDiv({ cls: 'unified-test-suite-recent-results' });
        resultsContainer.createEl('h3', { text: 'Recent Test Results' });
        
        if (this.testState.results.length === 0) {
            resultsContainer.createEl('p', { text: 'No test results yet. Run some tests to see results here.' });
            return;
        }
        
        // Show last 5 test results
        const recentResults = this.testState.results.slice(-5).reverse();
        const resultsList = resultsContainer.createEl('div', { cls: 'unified-test-suite-results-list' });
        
        recentResults.forEach(result => {
            const resultItem = resultsList.createDiv({ cls: `unified-test-suite-result-item unified-test-suite-result-${result.status}` });
            
            const header = resultItem.createDiv({ cls: 'unified-test-suite-result-header' });
            header.createEl('span', { text: result.testName, cls: 'unified-test-suite-result-name' });
            header.createEl('span', { text: result.status.toUpperCase(), cls: 'unified-test-suite-result-status' });
            
            if (result.duration) {
                resultItem.createEl('div', { 
                    text: `Duration: ${result.duration}ms`,
                    cls: 'unified-test-suite-result-duration'
                });
            }
            
            if (result.details) {
                resultItem.createEl('div', { 
                    text: result.details,
                    cls: 'unified-test-suite-result-details'
                });
            }
        });
    }
    
    // Helper methods for UI components
    private createStatWidget(container: HTMLElement, label: string, value: string) {
        const widget = container.createDiv({ cls: 'unified-test-suite-stat-widget' });
        widget.createDiv({ text: label, cls: 'unified-test-suite-stat-label' });
        widget.createDiv({ text: value, cls: 'unified-test-suite-stat-value' });
    }
    
    private createActionButton(container: HTMLElement, label: string, icon: string, callback: () => void) {
        const button = container.createEl('button', { 
            text: label, 
            cls: 'unified-test-suite-action-button mod-cta' 
        });
        button.onclick = callback;
    }
    
    private createTestButton(container: HTMLElement, label: string, callback: () => void) {
        const button = container.createEl('button', { 
            text: label, 
            cls: 'unified-test-suite-test-button' 
        });
        button.onclick = callback;
    }
    
    private createUtilityButton(container: HTMLElement, label: string, icon: string, callback: () => void) {
        const button = container.createEl('button', { 
            text: label, 
            cls: 'unified-test-suite-utility-button' 
        });
        button.onclick = callback;
    }
    
    // Test execution methods
    private async runTestSuite(category: string) {
        if (this.testState.isRunning) {
            new Notice('A test is already running. Please wait for it to complete.');
            return;
        }
        
        this.testState.isRunning = true;
        new Notice(`Starting ${category} test suite...`);
        
        try {
            // This would run all tests in the category
            // For now, just simulate with a delay
            await new Promise(resolve => setTimeout(resolve, 2000));
            
            const result: TestResult = {
                testName: `${category} Test Suite`,
                status: 'success',
                duration: 2000,
                details: `All ${category} tests completed successfully`,
                timestamp: new Date()
            };
            
            this.testState.results.push(result);
            new Notice(`${category} test suite completed successfully!`);
            
        } catch (error) {
            const result: TestResult = {
                testName: `${category} Test Suite`,
                status: 'failure',
                details: (error as Error).message,
                timestamp: new Date()
            };
            
            this.testState.results.push(result);
            new Notice(`${category} test suite failed: ${(error as Error).message}`);
            
        } finally {
            this.testState.isRunning = false;
            
            // Refresh dashboard if currently selected
            if (this.selectedTab === 'dashboard') {
                this.loadDashboardContent();
            }
        }
    }
    
    private async runIndividualTest(testId: string) {
        // Individual test implementation would go here
        new Notice(`Running ${this.getTestTitle(testId)}...`);
    }
    
    private async runScrapingPerformanceTest(size: number, targetFolder: string) {
        if (this.testState.isRunning) {
            new Notice('A test is already running. Please wait for it to complete.');
            return;
        }
        
        if (!targetFolder || targetFolder.trim() === '') {
            new Notice('Please select a target folder for performance testing.');
            return;
        }
        
        this.testState.isRunning = true;
        this.testState.currentTest = `Scraping Performance Test (${size} entries)`;
        
        const resultsArea = document.getElementById('scraping-performance-results');
        if (resultsArea) {
            resultsArea.innerHTML = '<p class="unified-test-suite-running-text">🔄 Running performance test...</p>';
        }
        
        console.log(`[OneiroMetrics Performance Test] Starting scraping test with ${size} entries from ${targetFolder}`);
        
        try {
            const startTime = performance.now();
            const testStartMemory = (performance as any).memory ? (performance as any).memory.usedJSHeapSize : 0;
            
            // Import UniversalMetricsCalculator
            const { UniversalMetricsCalculator } = await import('../../workers/UniversalMetricsCalculator');
            
            // Create metrics calculator with performance testing configuration
            const plugin = this.plugin as any;
            const originalSettings = { ...plugin.settings };
            
            // Temporarily modify settings for this test
            const testSettings = {
                ...originalSettings,
                selectionMode: 'folder',
                selectedFolder: targetFolder,
                performanceTesting: {
                    enabled: true,
                    maxFiles: size > 0 ? size : 0, // 0 = unlimited
                    showWarnings: true
                }
            };
            
            plugin.settings = testSettings;
            
            // Create calculator instance
            const calculator = new UniversalMetricsCalculator(
                this.app,
                plugin,
                undefined, // Use default worker pool config
                this.logger
            );
            
            console.log(`[OneiroMetrics Performance Test] Calculator created, starting scrape...`);
            
            // Run the actual scraping operation
            await calculator.scrapeMetrics();
            
            const endTime = performance.now();
            const testEndMemory = (performance as any).memory ? (performance as any).memory.usedJSHeapSize : 0;
            const totalTime = endTime - startTime;
            
            // Get statistics from the calculator
            const stats = calculator.getStatistics();
            
            // Restore original settings
            plugin.settings = originalSettings;
            
            // Calculate performance metrics
            const performanceMetrics = {
                totalTime,
                throughput: stats.totalCalculations > 0 ? (stats.totalCalculations / (totalTime / 1000)).toFixed(2) : '0',
                cacheHitRate: ((stats.cacheHits / (stats.cacheHits + stats.cacheMisses)) * 100).toFixed(1),
                averageProcessingTime: stats.averageProcessingTime.toFixed(2),
                workerPoolUsage: stats.workerPoolUsage,
                fallbackUsage: stats.fallbackUsage,
                memoryDelta: testEndMemory - testStartMemory
            };
            
            console.log(`[OneiroMetrics Performance Test] Completed in ${totalTime.toFixed(0)}ms`, performanceMetrics);
            
            // Update test results
            const result = {
                testName: `Scraping Performance Test (${size} entries)`,
                status: 'success' as const,
                duration: totalTime,
                details: `Processed folder "${targetFolder}" in ${totalTime.toFixed(0)}ms. Throughput: ${performanceMetrics.throughput} calculations/sec. Cache hit rate: ${performanceMetrics.cacheHitRate}%.`,
                timestamp: new Date()
            };
            
            this.testState.results.push(result);
            
            // Display detailed results
            if (resultsArea) {
                resultsArea.innerHTML = `
                    <div class="unified-test-suite-performance-results">
                        <h4>✅ Performance Test Complete</h4>
                        <div class="performance-metrics">
                            <div class="metric-row">
                                <span class="metric-label">Total Time:</span>
                                <span class="metric-value">${totalTime.toFixed(0)}ms</span>
                            </div>
                            <div class="metric-row">
                                <span class="metric-label">Throughput:</span>
                                <span class="metric-value">${performanceMetrics.throughput} calc/sec</span>
                            </div>
                            <div class="metric-row">
                                <span class="metric-label">Cache Hit Rate:</span>
                                <span class="metric-value">${performanceMetrics.cacheHitRate}%</span>
                            </div>
                            <div class="metric-row">
                                <span class="metric-label">Average Processing:</span>
                                <span class="metric-value">${performanceMetrics.averageProcessingTime}ms per entry</span>
                            </div>
                            <div class="metric-row">
                                <span class="metric-label">Worker Pool Usage:</span>
                                <span class="metric-value">${performanceMetrics.workerPoolUsage} tasks</span>
                            </div>
                            <div class="metric-row">
                                <span class="metric-label">Fallback Usage:</span>
                                <span class="metric-value">${performanceMetrics.fallbackUsage} tasks</span>
                            </div>
                            ${testStartMemory > 0 ? `
                            <div class="metric-row">
                                <span class="metric-label">Memory Delta:</span>
                                <span class="metric-value">${(performanceMetrics.memoryDelta / 1024 / 1024).toFixed(2)} MB</span>
                            </div>
                            ` : ''}
                        </div>
                        <div class="performance-summary">
                            <p><strong>Target Folder:</strong> ${targetFolder}</p>
                            <p><strong>Total Calculations:</strong> ${stats.totalCalculations}</p>
                            <p><strong>Cache Performance:</strong> ${stats.cacheHits} hits, ${stats.cacheMisses} misses</p>
                        </div>
                    </div>
                `;
            }
            
            new Notice(`✅ Performance test completed in ${totalTime.toFixed(0)}ms. Check results in Test Suite.`);
            
        } catch (error) {
            console.error(`[OneiroMetrics Performance Test] Failed:`, error);
            
            // Restore original settings on error
            const plugin = this.plugin as any;
            plugin.settings = plugin.settings.originalSettings || plugin.settings;
            
            const result = {
                testName: `Scraping Performance Test (${size} entries)`,
                status: 'failure' as const,
                details: `Performance test failed: ${(error as Error).message}`,
                timestamp: new Date()
            };
            
            this.testState.results.push(result);
            
            if (resultsArea) {
                resultsArea.innerHTML = `
                    <div class="unified-test-suite-error-results">
                        <h4>❌ Performance Test Failed</h4>
                        <p><strong>Error:</strong> ${(error as Error).message}</p>
                        <p><strong>Target Folder:</strong> ${targetFolder}</p>
                        <p>Check the console for more details.</p>
                    </div>
                `;
            }
            
            new Notice(`❌ Performance test failed: ${(error as Error).message}`);
            this.logger?.error('PerformanceTest', 'Scraping performance test failed', error as Error);
            
        } finally {
            this.testState.isRunning = false;
            this.testState.currentTest = null;
            
            // Refresh dashboard if currently selected
            if (this.selectedTab === 'dashboard') {
                this.loadDashboardContent();
            }
        }
    }
    
    // Memory analysis test
    private loadMemoryAnalysisTest() {
        this.contentContainer.createEl('p', {
            text: 'Analyze memory usage patterns and detect potential memory leaks.',
            cls: 'unified-test-suite-content-description'
        });
        
        // Memory test options
        const memoryTestsContainer = this.contentContainer.createDiv({ cls: 'unified-test-suite-memory-tests' });
        memoryTestsContainer.createEl('h3', { text: 'Memory Analysis Tests' });
        
        this.createTestButton(memoryTestsContainer, 'Memory Usage Baseline', () => {
            this.runMemoryTest('baseline');
        });
        
        this.createTestButton(memoryTestsContainer, 'Memory Leak Detection', () => {
            this.runMemoryTest('leak-detection');
        });
        
        this.createTestButton(memoryTestsContainer, 'Garbage Collection Analysis', () => {
            this.runMemoryTest('gc-analysis');
        });
    }
    
    // Scaling test
    private loadScalingTest() {
        this.contentContainer.createEl('p', {
            text: 'Test performance scaling across different data sizes and complexity levels.',
            cls: 'unified-test-suite-content-description'
        });
        
        // Scaling test configurations
        const scalingContainer = this.contentContainer.createDiv({ cls: 'unified-test-suite-scaling-tests' });
        scalingContainer.createEl('h3', { text: 'Scaling Test Configurations' });
        
        this.createTestButton(scalingContainer, 'Linear Scaling Test', () => {
            this.runScalingTest('linear');
        });
        
        this.createTestButton(scalingContainer, 'Exponential Scaling Test', () => {
            this.runScalingTest('exponential');
        });
        
        this.createTestButton(scalingContainer, 'Complex Data Scaling Test', () => {
            this.runScalingTest('complex');
        });
    }
    
    // Logging content (moved from utilities)
    private loadLoggingContent() {
        this.contentContainer.createEl('p', {
            text: 'Manage logging infrastructure, view logs, and export log data.',
            cls: 'unified-test-suite-content-description'
        });
        
        // Logging settings section
        const settingsContainer = this.contentContainer.createDiv({ cls: 'unified-test-suite-logging-settings' });
        settingsContainer.createEl('h3', { text: 'Logging Settings' });
        
        // Log level setting
        const logLevelContainer = settingsContainer.createDiv({ cls: 'unified-test-suite-setting-item' });
        logLevelContainer.createEl('label', { 
            text: 'Log Level:',
            cls: 'unified-test-suite-setting-label'
        });
        
        const logLevelSelect = logLevelContainer.createEl('select', { 
            cls: 'unified-test-suite-log-level-select' 
        });
        
        // Add log level options (excluding 'off')
        const logLevels = [
            { value: 'errors', label: 'Error' },
            { value: 'warn', label: 'Warning' },
            { value: 'info', label: 'Info' },
            { value: 'debug', label: 'Debug' },
            { value: 'trace', label: 'Trace' }
        ];
        
        logLevels.forEach(level => {
            const option = logLevelSelect.createEl('option', { 
                text: level.label,
                value: level.value
            });
        });
        
        // Set current log level
        const currentLogLevel = (this.plugin as any).settings?.logging?.level || 'info';
        logLevelSelect.value = currentLogLevel;
        
        // Debug logging to track log level reading
        console.log(`[OneiroMetrics Debug] Test Suite reading log level: ${currentLogLevel}`);
        console.log(`[OneiroMetrics Debug] Full logging settings:`, (this.plugin as any).settings?.logging);
        
        // Add change handler
        logLevelSelect.addEventListener('change', () => {
            this.updateLogLevel(logLevelSelect.value as any);
        });
        
        // Helper text
        const helperText = settingsContainer.createDiv({ cls: 'unified-test-suite-setting-helper' });
        helperText.createEl('p', {
            text: 'Note: To turn logging off completely, go to Settings → OneiroMetrics → Logging → Level and select "Off".',
            cls: 'unified-test-suite-helper-text'
        });
        
        // Logging test controls
        const testingContainer = this.contentContainer.createDiv({ cls: 'unified-test-suite-logging-testing' });
        testingContainer.createEl('h3', { text: 'Logging System Tests' });
        
        this.createTestButton(testingContainer, 'Test Log Levels', () => {
            this.testLogLevels();
        });
        
        this.createTestButton(testingContainer, 'Test Memory Adapter', () => {
            this.testMemoryAdapter();
        });
        
        this.createTestButton(testingContainer, 'Test Log Persistence', () => {
            this.testLogPersistence();
        });
        
        // Log management utilities
        const managementContainer = this.contentContainer.createDiv({ cls: 'unified-test-suite-log-management' });
        managementContainer.createEl('h3', { text: 'Log Management' });
        
        this.createUtilityButton(managementContainer, 'Open Log Viewer', 'file-text', () => {
            this.openLogViewer();
        });
        
        this.createUtilityButton(managementContainer, 'Export Logs to File', 'download', () => {
            this.exportLogsToFile();
        });
        
        this.createUtilityButton(managementContainer, 'Copy Recent Logs to Clipboard', 'copy', () => {
            this.copyRecentLogsToClipboard();
        });
        
        this.createUtilityButton(managementContainer, 'Clear Logs', 'trash', () => {
            this.clearLogs();
        });
        
        // Log statistics
        const statsContainer = this.contentContainer.createDiv({ cls: 'unified-test-suite-log-stats' });
        statsContainer.createEl('h3', { text: 'Log Statistics' });
        
        this.loadLogStatistics(statsContainer);
    }
    
    // Update log level setting
    private updateLogLevel(newLevel: string) {
        try {
            // Update plugin settings
            const plugin = this.plugin as any;
            if (plugin.setLogLevel) {
                plugin.setLogLevel(newLevel);
                new Notice(`Log level changed to ${newLevel.toUpperCase()}`);
                
                // Refresh log statistics after a brief delay to see the effect
                setTimeout(() => {
                    if (this.selectedTab === 'test-logging') {
                        this.loadLoggingContent();
                    }
                }, 500);
            } else {
                new Notice('Failed to update log level - setLogLevel method not available');
            }
        } catch (error) {
            new Notice(`Failed to update log level: ${(error as Error).message}`);
            this.logger?.error('Failed to update log level', (error as Error).message);
        }
    }
    
    private showCustomDatasetDialog() {
        // Create a simple dialog for custom dataset configuration
        const dialog = this.contentContainer.createDiv({ cls: 'unified-test-suite-custom-dialog' });
        dialog.createEl('h4', { text: 'Custom Dataset Configuration' });
        
        // Entry count setting
        const countContainer = dialog.createDiv({ cls: 'unified-test-suite-setting-item' });
        countContainer.createEl('label', { text: 'Number of entries:' });
        const countInput = countContainer.createEl('input', { 
            type: 'number',
            value: '1000'
        });
        countInput.setAttribute('min', '1');
        countInput.setAttribute('max', '50000');
        
        // Realistic content setting
        const realisticContainer = dialog.createDiv({ cls: 'unified-test-suite-setting-item' });
        realisticContainer.createEl('label', { text: 'Realistic content:' });
        const realisticCheckbox = realisticContainer.createEl('input', { type: 'checkbox' });
        realisticCheckbox.checked = true;
        
        // Date range settings
        const dateContainer = dialog.createDiv({ cls: 'unified-test-suite-setting-item' });
        dateContainer.createEl('label', { text: 'Date range (months back):' });
        const dateInput = dateContainer.createEl('input', { 
            type: 'number',
            value: '12'
        });
        dateInput.setAttribute('min', '1');
        dateInput.setAttribute('max', '60');
        
        // Buttons
        const buttonContainer = dialog.createDiv({ cls: 'unified-test-suite-dialog-buttons' });
        
        const generateButton = buttonContainer.createEl('button', { 
            text: 'Generate Custom Dataset',
            cls: 'mod-cta'
        });
        
        const cancelButton = buttonContainer.createEl('button', { 
            text: 'Cancel'
        });
        
        generateButton.onclick = async () => {
            const count = parseInt(countInput.value);
            const realistic = realisticCheckbox.checked;
            const monthsBack = parseInt(dateInput.value);
            
            const startDate = new Date();
            startDate.setMonth(startDate.getMonth() - monthsBack);
            
            await this.generateCustomTestData({
                count,
                realistic,
                startDate,
                endDate: new Date()
            });
            
            dialog.remove();
        };
        
        cancelButton.onclick = () => {
            dialog.remove();
        };
    }
    
    private async generateCustomTestData(options: {
        count: number;
        realistic: boolean;
        startDate: Date;
        endDate: Date;
    }) {
        if (this.testState.isRunning) {
            new Notice('A test is already running. Please wait for it to complete.');
            return;
        }
        
        this.testState.isRunning = true;
        new Notice(`Generating custom dataset with ${options.count} entries...`);
        
        try {
            const plugin = this.plugin as any;
            const testDataFolder = plugin.settings?.testDataFolder || 'Test Data/Dreams';
            
            const { DummyDataGenerator } = require('../utils/DummyDataGenerator');
            const generator = new DummyDataGenerator();
            
            const { data, stats } = await generator.generateDreamDataset({
                count: options.count,
                realistic: options.realistic,
                startDate: options.startDate,
                endDate: options.endDate,
                evenDistribution: true
            });
            
            await this.ensureFolderExists(testDataFolder);
            
            let createdCount = 0;
            const calloutName = plugin.settings?.calloutName || 'dream-diary';
            
            for (const entry of data) {
                const noteContent = await this.createDreamNoteContent(entry, calloutName);
                const fileName = `${entry.title.replace(/[^\w\s-]/g, '').replace(/\s+/g, '-')}.md`;
                const filePath = `${testDataFolder}/${fileName}`;
                
                try {
                    const existingFile = this.app.vault.getAbstractFileByPath(filePath);
                    if (!existingFile) {
                        await this.app.vault.create(filePath, noteContent);
                        createdCount++;
                        if (createdCount <= 3) {
                            console.log(`[OneiroMetrics] Created note: ${filePath}`);
                        }
                    } else {
                        console.log(`[OneiroMetrics] Skipped existing file: ${filePath}`);
                    }
                } catch (error) {
                    console.error(`[OneiroMetrics] Failed to create note: ${filePath}`, error);
                    this.logger.warn('TestData', `Failed to create test note: ${filePath} - ${(error as Error).message}`);
                }
            }
            
            console.log(`[OneiroMetrics] Note creation complete. Created: ${createdCount}, Total generated: ${data.length}`);
            
            // Update test results
            const result = {
                testName: `Generate custom dataset`,
                status: 'success' as const,
                duration: stats.generationTime,
                details: `Created ${createdCount} custom dream journal notes in ${testDataFolder}. Generated ${stats.totalGenerated} entries in ${stats.generationTime.toFixed(0)}ms.`,
                timestamp: new Date()
            };
            
            this.testState.results.push(result);
            new Notice(`✅ Generated ${createdCount} custom test dream notes`);
            
        } catch (error) {
            console.error(`[OneiroMetrics] Test data generation failed:`, error);
            
            const result = {
                testName: `Generate custom dataset`,
                status: 'failure' as const,
                details: `${(error as Error).message} (Check console for details)`,
                timestamp: new Date()
            };
            
            this.testState.results.push(result);
            new Notice(`❌ Failed to generate custom test data: ${(error as Error).message}`);
            this.logger.error('TestData', 'Custom test data generation failed', error as Error);
            
        } finally {
            this.testState.isRunning = false;
            
            if (this.selectedTab === 'dashboard') {
                this.loadDashboardContent();
            }
        }
    }
    
    private clearTestDataFolder() {
        const plugin = this.plugin as any;
        const testDataFolder = plugin.settings?.testDataFolder || 'Test Data/Dreams';
        
        // Confirm with user
        const confirmed = confirm(`Are you sure you want to delete all files in "${testDataFolder}"? This action cannot be undone.`);
        
        if (!confirmed) {
            return;
        }
        
        this.clearFolderContents(testDataFolder);
    }
    
    private async ensureFolderExists(folderPath: string): Promise<void> {
        if (!folderPath) return;
        
        const pathParts = folderPath.split('/').filter(part => part.length > 0);
        let currentPath = '';
        
        for (const part of pathParts) {
            currentPath += (currentPath ? '/' : '') + part;
            const folder = this.app.vault.getAbstractFileByPath(currentPath);
            
            if (!folder) {
                try {
                    await this.app.vault.createFolder(currentPath);
                    this.logger.debug('TestData', 'Created folder', currentPath);
                } catch (error) {
                    // Folder might already exist, that's OK
                    const errorMessage = (error as Error).message;
                    if (!errorMessage.includes('already exists')) {
                        this.logger.warn('TestData', `Unexpected error creating folder: ${currentPath} - ${errorMessage}`);
                    }
                }
            }
        }
    }
    
    private async clearFolderContents(folderPath: string) {
        try {
            const folder = this.app.vault.getAbstractFileByPath(folderPath);
            
            if (!folder || !('children' in folder)) {
                new Notice(`Test data folder "${folderPath}" not found`);
                return;
            }
            
            let deletedCount = 0;
            const folderChildren = folder.children;
            
            if (folderChildren && Array.isArray(folderChildren)) {
                const children = [...folderChildren]; // Create a copy to avoid modification during iteration
                
                for (const child of children) {
                    try {
                        await this.app.vault.delete(child);
                        deletedCount++;
                    } catch (error) {
                        this.logger.warn('TestData', `Failed to delete test file: ${child.path} - ${(error as Error).message}`);
                    }
                }
            }
            
            new Notice(`✅ Deleted ${deletedCount} files from test data folder`);
            
        } catch (error) {
            new Notice(`❌ Failed to clear test data folder: ${(error as Error).message}`);
            this.logger.error('TestData', 'Failed to clear test data folder', error as Error);
        }
    }
    
    private refreshLogLevelDisplay() {
        // Find the log level select element and update its value
        const logLevelSelect = this.contentContainer.querySelector('.unified-test-suite-log-level-select') as HTMLSelectElement;
        if (logLevelSelect) {
            const currentLogLevel = (this.plugin as any).settings?.logging?.level || 'info';
            logLevelSelect.value = currentLogLevel;
            
            // Debug logging
            console.log(`[OneiroMetrics Debug] Refreshed log level display to: ${currentLogLevel}`);
        }
    }
    
    private async createDreamNoteContent(entry: any, calloutName: string): Promise<string> {
        const plugin = this.plugin as any;
        const templateId = plugin.settings?.testDataTemplate;
        
        // If no template is specified, use the default format
        if (!templateId) {
            return this.createDefaultDreamNoteContent(entry, calloutName);
        }
        
        // Find the OneiroMetrics template by ID
        const existingTemplates = plugin.settings?.linting?.templates || [];
        const selectedTemplate = existingTemplates.find((template: any) => template.id === templateId);
        
        if (!selectedTemplate) {
            console.log(`[OneiroMetrics] Template with ID ${templateId} not found, using default format`);
            return this.createDefaultDreamNoteContent(entry, calloutName);
        }
        
        try {
            let noteContent = selectedTemplate.content || '';
            
            // If template is a Templater template, try to read the file
            if (selectedTemplate.isTemplaterTemplate && selectedTemplate.templaterFile) {
                const templateFile = this.app.vault.getAbstractFileByPath(selectedTemplate.templaterFile);
                if (templateFile && 'path' in templateFile) {
                    noteContent = await this.app.vault.read(templateFile as any);
                } else {
                    console.log(`[OneiroMetrics] Templater file ${selectedTemplate.templaterFile} not found, using stored content`);
                }
            }
            
            // Replace template placeholders with actual data
            const entryDate = new Date(entry.date);
            
            // Support multiple date formats
            noteContent = noteContent.replace(/\{\{date\}\}/g, entry.date); // ISO format: YYYY-MM-DD
            noteContent = noteContent.replace(/\{\{date-iso\}\}/g, entry.date); // Same as above, explicit
            noteContent = noteContent.replace(/\{\{date-long\}\}/g, entryDate.toLocaleDateString('en-US', { 
                year: 'numeric', 
                month: 'long', 
                day: 'numeric' 
            })); // Format: January 15, 2025
            noteContent = noteContent.replace(/\{\{date-month-day\}\}/g, entryDate.toLocaleDateString('en-US', { 
                month: 'long', 
                day: 'numeric' 
            })); // Format: January 15
            noteContent = noteContent.replace(/\{\{date-compact\}\}/g, entryDate.toISOString().split('T')[0].replace(/-/g, '')); // Format: YYYYMMDD
            noteContent = noteContent.replace(/\{\{date-ref\}\}/g, entryDate.toISOString().split('T')[0].replace(/-/g, '')); // Alias for date-compact
            
            noteContent = noteContent.replace(/\{\{title\}\}/g, entry.title);
            
            // Handle content replacement more carefully to avoid nested callout issues
            if (noteContent.includes('{{content}}')) {
                noteContent = noteContent.replace(/\{\{content\}\}/g, entry.content);
            } else {
                // If no content placeholder, look for nested callout patterns and replace carefully
                // Handle patterns like "> > Dream goes here." 
                const nestedCalloutPattern = /^(>\s*>\s*)(Dream goes here\.|.*goes here\.?)$/gm;
                noteContent = noteContent.replace(nestedCalloutPattern, `$1${entry.content}`);
                
                // Also handle simple "Dream goes here" patterns
                noteContent = noteContent.replace(/Dream goes here\.?/g, entry.content);
            }
            
            // Replace metric placeholders
            Object.entries(entry.metrics).forEach(([key, value]) => {
                const placeholder = new RegExp(`\\{\\{${key.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')}\\}\\}`, 'g');
                noteContent = noteContent.replace(placeholder, String(value));
            });
            
            // Handle metrics placeholder
            if (noteContent.includes('{{metrics}}')) {
                const metrics = Object.entries(entry.metrics)
                    .map(([key, value]) => `**${key}**: ${value}`)
                    .join(' • ');
                noteContent = noteContent.replace(/\{\{metrics\}\}/g, metrics);
            }
            
            // If the template doesn't contain our callout or metrics, append them
            const expectedCallout = `[!${calloutName}]`;
            if (!noteContent.includes(expectedCallout) && !noteContent.includes('{{metrics}}')) {
                const metrics = Object.entries(entry.metrics)
                    .map(([key, value]) => `**${key}**: ${value}`)
                    .join(' • ');
                noteContent += `\n\n> ${expectedCallout} Dream Metrics\n> ${metrics}\n`;
            }
            
            return noteContent;
            
        } catch (error) {
            console.error(`[OneiroMetrics] Error processing template ${selectedTemplate.name}:`, error);
            new Notice(`Failed to process template ${selectedTemplate.name}, using default format`);
            return this.createDefaultDreamNoteContent(entry, calloutName);
        }
    }
    
    private createDefaultDreamNoteContent(entry: any, calloutName: string): string {
        const metrics = Object.entries(entry.metrics)
            .map(([key, value]) => `**${key}**: ${value}`)
            .join(' • ');
        
        return `---
date: ${entry.date}
title: "${entry.title}"
tags: [dream, test-data]
---

# ${entry.title}

${entry.content}

> [!${calloutName}] Dream Metrics
> ${metrics}
`;
    }
    
    private countTestFiles() {
        const plugin = this.plugin as any;
        const testDataFolder = plugin.settings?.testDataFolder || 'Test Data/Dreams';
        
        try {
            const folder = this.app.vault.getAbstractFileByPath(testDataFolder);
            
            if (!folder || !('children' in folder)) {
                new Notice(`Test data folder "${testDataFolder}" not found`);
                return;
            }
            
            const folderChildren = folder.children;
            let fileCount = 0;
            let markdownCount = 0;
            
            if (folderChildren && Array.isArray(folderChildren)) {
                for (const child of folderChildren) {
                    if ('extension' in child) {
                        fileCount++;
                        if (child.extension === 'md') {
                            markdownCount++;
                        }
                    }
                }
            }
            
            new Notice(`📊 Test data folder contains ${markdownCount} markdown files (${fileCount} total files)`);
            
        } catch (error) {
            new Notice(`❌ Failed to count test files: ${(error as Error).message}`);
            this.logger.error('TestData', 'Failed to count test files', error as Error);
        }
    }
} 