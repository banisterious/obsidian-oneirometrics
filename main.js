/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => DreamMetricsPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian2 = require("obsidian");

// types.ts
var DEFAULT_METRICS = [
  {
    name: "Sensory Detail",
    range: { min: 1, max: 5 },
    description: "Level of sensory information recalled from the dream"
  },
  {
    name: "Emotional Recall",
    range: { min: 1, max: 5 },
    description: "Level of emotional detail recalled from the dream"
  },
  {
    name: "Lost Segments",
    range: { min: 0, max: 10 },
    description: "Number of distinct instances where parts of the dream are missing or forgotten"
  },
  {
    name: "Descriptiveness",
    range: { min: 1, max: 5 },
    description: "Level of detail in the dream description"
  },
  {
    name: "Confidence Score",
    range: { min: 1, max: 5 },
    description: "Confidence level in the completeness of dream recall"
  }
];

// settings.ts
var import_obsidian = require("obsidian");
var DreamMetricsSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Dream Metrics Settings" });
    new import_obsidian.Setting(containerEl).setName("Project Note Path").setDesc("Path to the note where dream metrics will be aggregated").addText((text) => text.setPlaceholder("Dreams/Metrics.md").setValue(this.plugin.settings.projectNotePath).onChange(async (value) => {
      this.plugin.settings.projectNotePath = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Callout Name").setDesc('Name of the callout block used for dream metrics (e.g., "dream-metrics")').addText((text) => text.setPlaceholder("dream-metrics").setValue(this.plugin.settings.calloutName).onChange(async (value) => {
      this.plugin.settings.calloutName = value.toLowerCase().replace(/\s+/g, "-");
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Selected Notes").setDesc("Notes to search for dream metrics (one per line)").addTextArea((text) => text.setPlaceholder("Journal/Journal.md\nDreams/2024.md").setValue(this.plugin.settings.selectedNotes.join("\n")).onChange(async (value) => {
      this.plugin.settings.selectedNotes = value.split("\n").filter((note) => note.trim());
      await this.plugin.saveSettings();
    }));
    containerEl.createEl("h3", { text: "Metrics Configuration" });
    this.plugin.settings.metrics.forEach((metric, index) => {
      const metricSetting = new import_obsidian.Setting(containerEl).setName(metric.name).setDesc(`Range: ${metric.range.min}-${metric.range.max}`).addText((text) => text.setValue(metric.description).onChange(async (value) => {
        this.plugin.settings.metrics[index].description = value;
        await this.plugin.saveSettings();
      })).addExtraButton((button) => button.setIcon("trash").setTooltip("Remove metric").onClick(async () => {
        this.plugin.settings.metrics.splice(index, 1);
        await this.plugin.saveSettings();
        this.display();
      }));
    });
    new import_obsidian.Setting(containerEl).setName("Add New Metric").addButton((button) => button.setButtonText("Add Metric").onClick(async () => {
      this.plugin.settings.metrics.push({
        name: "New Metric",
        range: { min: 1, max: 5 },
        description: "Description of the metric"
      });
      await this.plugin.saveSettings();
      this.display();
    }));
    new import_obsidian.Setting(containerEl).setName("Reset to Defaults").setDesc("Restore default metrics configuration").addButton((button) => button.setButtonText("Reset").onClick(async () => {
      this.plugin.settings.metrics = [...DEFAULT_METRICS];
      await this.plugin.saveSettings();
      this.display();
    }));
  }
};

// main.ts
var DreamMetricsPlugin = class extends import_obsidian2.Plugin {
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new DreamMetricsSettingTab(this.app, this));
    this.addRibbonIcon("dream", "OneiroMetrics", () => {
      new OneiroMetricsModal(this.app, this).open();
    });
    this.addCommand({
      id: "open-oneirometrics-modal",
      name: "Open OneiroMetrics",
      callback: () => {
        new OneiroMetricsModal(this.app, this).open();
      }
    });
    this.addCommand({
      id: "scrape-metrics",
      name: "Scrape Metrics",
      callback: () => this.scrapeMetrics()
    });
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, {
      projectNotePath: "Dreams/Metrics.md",
      metrics: [...DEFAULT_METRICS],
      selectedNotes: [],
      calloutName: "dream-metrics"
    }, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  async scrapeMetrics() {
    const metrics = {};
    let totalWords = 0;
    let entriesProcessed = 0;
    for (const path of this.settings.selectedNotes) {
      const file = this.app.vault.getAbstractFileByPath(path);
      if (!(file instanceof import_obsidian2.TFile)) {
        console.log(`File not found or not a file: ${path}`);
        continue;
      }
      try {
        const content = await this.app.vault.read(file);
        const calloutMatch = content.match(/>\s*\[!${this.settings.calloutName}\]\s*\n>(.*?)(?=\n\n|\n[^>]|$)/s);
        if (calloutMatch) {
          const metricsText = calloutMatch[1].replace(/>\s*/g, "");
          const wordCount = content.split(/\s+/).length;
          totalWords += wordCount;
          entriesProcessed++;
          const metricPairs = metricsText.split(",").map((pair) => pair.trim());
          for (const pair of metricPairs) {
            const [name, value] = pair.split(":").map((s) => s.trim());
            if (name && !isNaN(Number(value))) {
              if (!metrics[name]) {
                metrics[name] = [];
              }
              metrics[name].push(Number(value));
            }
          }
        }
      } catch (error) {
        console.error(`Error processing file ${path}:`, error);
      }
    }
    if (entriesProcessed > 0) {
      const avgWords = Math.round(totalWords / entriesProcessed);
      metrics["Average Words"] = [avgWords];
    }
    await this.updateProjectNote(metrics);
  }
  extractDateFromNotePath(path) {
    const filename = path.split("/").pop() || "";
    const dateMatch = filename.match(/\d{4}-\d{2}-\d{2}/);
    return dateMatch ? dateMatch[0] : new Date().toISOString().split("T")[0];
  }
  extractTitleFromNotePath(path) {
    const filename = path.split("/").pop() || "";
    return filename.replace(/\.md$/, "");
  }
  async updateProjectNote(metrics) {
    const projectFile = this.app.vault.getAbstractFileByPath(this.settings.projectNotePath);
    if (!(projectFile instanceof import_obsidian2.TFile)) {
      console.log(`Project note not found: ${this.settings.projectNotePath}`);
      return;
    }
    try {
      await this.app.vault.modify(projectFile, this.generateMetricsTable(metrics));
    } catch (error) {
      console.error("Error writing to project note:", error);
    }
  }
  generateMetricsTable(metrics) {
    let table = "# OneiroMetrics Analysis\n\n";
    table += '<div class="oom-table-container">\n';
    table += '<table class="oom-table">\n';
    table += "<thead>\n";
    table += "<tr>\n";
    table += "<th>Metric</th>\n";
    table += "<th>Average</th>\n";
    table += "<th>Min</th>\n";
    table += "<th>Max</th>\n";
    table += "<th>Count</th>\n";
    table += "</tr>\n";
    table += "</thead>\n";
    table += "<tbody>\n";
    for (const [name, values] of Object.entries(metrics)) {
      if (values.length === 0)
        continue;
      const avg = values.reduce((a, b) => a + b) / values.length;
      const min = Math.min(...values);
      const max = Math.max(...values);
      table += "<tr>\n";
      table += `<td>${name}</td>
`;
      table += `<td>${avg.toFixed(2)}</td>
`;
      table += `<td>${min}</td>
`;
      table += `<td>${max}</td>
`;
      table += `<td>${values.length}</td>
`;
      table += "</tr>\n";
    }
    table += "</tbody>\n";
    table += "</table>\n";
    table += "</div>";
    return table;
  }
};
var OneiroMetricsModal = class extends import_obsidian2.Modal {
  constructor(app, plugin) {
    super(app);
    this.plugin = plugin;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.addClass("oom-modal");
    contentEl.createEl("h2", { text: "OneiroMetrics" });
    new import_obsidian2.Setting(contentEl).setName("Project Note Path").addText((text) => text.setValue(this.plugin.settings.projectNotePath).onChange((value) => {
      this.plugin.settings.projectNotePath = value;
    }));
    new import_obsidian2.Setting(contentEl).setName("Selected Notes").addTextArea((text) => text.setValue(this.plugin.settings.selectedNotes.join("\n")).onChange((value) => {
      this.plugin.settings.selectedNotes = value.split("\n").filter((note) => note.trim());
    }));
    new import_obsidian2.Setting(contentEl).setName("Callout Name").addText((text) => text.setValue(this.plugin.settings.calloutName).onChange((value) => {
      this.plugin.settings.calloutName = value.toLowerCase().replace(/\s+/g, "-");
    }));
    new import_obsidian2.Setting(contentEl).setName("Scrape Metrics").addButton((button) => button.setButtonText("Scrape").onClick(async () => {
      await this.plugin.scrapeMetrics();
      new import_obsidian2.Notice("Metrics scraped successfully!");
      this.close();
    }));
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
